#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class fwsmBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(fwsmBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class fwsmParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=fwsmBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(fwsmParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _ip4_(self):  # noqa
        self._pattern(r'((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])')

    @tatsumasu()
    def _ipX_(self):  # noqa
        self._pattern(r'\w+\.\w+\.\w+\.\w+')

    @tatsumasu()
    def _ip6_(self):  # noqa
        self._pattern(r'[a-fA-F0-9]*:[a-fA-F0-9\.\:]+')

    @tatsumasu()
    def _NL_(self):  # noqa
        with self._optional():
            self._token('\r')
        self._token('\n')

    @tatsumasu()
    def _TOEOL_(self):  # noqa
        self._pattern(r'[^\n]*')

    @tatsumasu()
    def _SP_(self):  # noqa
        self._token(' ')

    @tatsumasu()
    def _WS_(self):  # noqa
        self._pattern(r'[ \t]+')

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern(r'[a-zA-Z_][A-Za-z0-9_\-\.]*')

    @tatsumasu()
    def _int_(self):  # noqa
        self._pattern(r'[0-9]+')

    @tatsumasu()
    def _string_(self):  # noqa
        self._pattern(r'[\S]+')

    @tatsumasu()
    def _obj_name_(self):  # noqa
        self._pattern(r'[A-Za-z0-9_\-\.+]*')

    @tatsumasu()
    def _hostname_(self):  # noqa
        self._token('hostname')
        self._WS_()
        self._identifier_()
        self.name_last_node('hostname')
        self._NL_()
        self.ast._define(
            ['hostname'],
            []
        )

    @tatsumasu()
    def _domain_name_(self):  # noqa
        self._token('domain-name')
        self._WS_()
        self._identifier_()
        self.name_last_node('domain_name')
        self.ast._define(
            ['domain_name'],
            []
        )

    @tatsumasu()
    def _description_(self):  # noqa
        self._token('description')
        self._WS_()
        self._pattern(r'[^\n]+')
        self.name_last_node('description')
        self._NL_()
        self.ast._define(
            ['description'],
            []
        )

    @tatsumasu()
    def _interface_(self):  # noqa
        self._token('interface')
        self._WS_()
        self._interface_alias_()
        self.name_last_node('alias')
        self._NL_()

        def block2():
            self._SP_()
            self._interface_detail_()
        self._closure(block2)
        self.name_last_node('detail')
        self.ast._define(
            ['alias', 'detail'],
            []
        )

    @tatsumasu()
    def _interface_alias_(self):  # noqa
        self._pattern(r'[^\s]+')

    @tatsumasu()
    def _acl_id_(self):  # noqa
        self._obj_name_()

    @tatsumasu()
    def _acl_line_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('line')
                self._int_()
            with self._option():
                self._void()
            self._error('no available options')

    @tatsumasu()
    def _acl_extended_(self):  # noqa
        self._token('extended')

    @tatsumasu()
    def _acl_mode_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('permit')
                with self._option():
                    self._token('deny')
                self._error('no available options')

    @tatsumasu()
    def _acl_protocol_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_object_group_service_id_()
                        with self._option():
                            self._acl_object_group_protocol_id_()
                        self._error('no available options')
                self.name_last_node('name')
            with self._option():
                self._token('object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_service_id_()
                self.name_last_node('name')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._protocol_code_()
                        with self._option():
                            self._int_()
                        self._error('no available options')
                self.name_last_node('name')
            self._error('no available options')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @tatsumasu()
    def _node_(self):  # noqa
        self._acl_host_()
        self.name_last_node('host')
        with self._optional():
            self._WS_()
            self._acl_port_()
            self.name_last_node('port')
        self.ast._define(
            ['host', 'port'],
            []
        )

    @tatsumasu()
    def _acl_object_group_network_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_network_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_service_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_service_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_icmp_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_protocol_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_names_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_time_range_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_interface_id_(self):  # noqa
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_host_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('host')
                        with self._option():
                            self._token('ip')
                        self._error('no available options')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_names_id_()
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.name_last_node('address')
            with self._option():
                self._token('interface')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('name')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('any')
                        with self._option():
                            self._token('any4')
                        with self._option():
                            self._token('any6')
                        self._error('no available options')
                self.name_last_node('type')
            with self._option():
                self._token('object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_network_id_()
                self.name_last_node('name')
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_network_id_()
                self.name_last_node('name')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_names_id_()
                        with self._option():
                            self._ip4_()
                        self._error('no available options')
                self.name_last_node('address')
                self._WS_()
                self._ip4_()
                self.name_last_node('netmask')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_names_id_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.name_last_node('address')
                self._token('/')
                self._int_()
                self.name_last_node('netmask')
            self._error('no available options')
        self.ast._define(
            ['address', 'name', 'netmask', 'type'],
            []
        )

    @tatsumasu()
    def _acl_port_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_service_id_()
                self.name_last_node('name')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('gt')
                        with self._option():
                            self._token('lt')
                        with self._option():
                            self._token('eq')
                        with self._option():
                            self._token('neq')
                        self._error('no available options')
                self.name_last_node('op')
                self._WS_()
                self._port_()
                self.name_last_node('port')
            with self._option():
                self._token('range')
                self.name_last_node('type')
                self._WS_()
                self._port_()
                self.name_last_node('start')
                self._WS_()
                self._port_()
                self.name_last_node('stop')
            self._error('no available options')
        self.ast._define(
            ['name', 'op', 'port', 'start', 'stop', 'type'],
            []
        )

    @tatsumasu()
    def _acl_icmp_options_(self):  # noqa
        with self._choice():
            with self._option():
                self._WS_()
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_icmp_id_()
                self.name_last_node('object')
            with self._option():
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._icmp_type_()
                        with self._option():
                            self._int_()
                        self._error('no available options')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._int_()
                    self.name_last_node('code')
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['code', 'object', 'type'],
            []
        )

    @tatsumasu()
    def _acl_options_(self):  # noqa

        def block0():
            self._acl_option_()
            with self._optional():
                self._WS_()
        self._closure(block0)

    @tatsumasu()
    def _acl_option_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('log')
                self.name_last_node('type')

                def block2():
                    self._WS_()
                    self._acl_option_log_option_()
                self._closure(block2)
                self.name_last_node('options')
            with self._option():
                self._token('time-range')
                self.name_last_node('type')
                self._WS_()
                self._acl_time_range_id_()
                self.name_last_node('option')
            with self._option():
                self._token('inactive')
                self.name_last_node('type')
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['option', 'options', 'type'],
            []
        )

    @tatsumasu()
    def _acl_option_log_option_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('debugging')
                        with self._option():
                            self._token('disable')
                        with self._option():
                            self._token('default')
                        with self._option():
                            self._token('notifications')
                        with self._option():
                            self._token('warnings')
                        self._error('no available options')
            with self._option():
                self._token('interval')
                self._WS_()
                self._int_()
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('0')
                        with self._option():
                            self._token('1')
                        with self._option():
                            self._token('2')
                        with self._option():
                            self._token('3')
                        with self._option():
                            self._token('4')
                        with self._option():
                            self._token('5')
                        with self._option():
                            self._token('6')
                        with self._option():
                            self._token('7')
                        self._error('no available options')
            with self._option():
                self._void()
            self._error('no available options')

    @tatsumasu()
    def _acl_icmp_node_(self):  # noqa
        self._acl_host_()

    @tatsumasu()
    def _remark_(self):  # noqa
        with self._group():
            self._pattern(r'[^\n]*')

    @tatsumasu()
    def _object_(self):  # noqa
        self._token('object')
        self._WS_()
        self._object_type_()

    @tatsumasu()
    def _object_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('network')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                with self._optional():
                    self._NL_()
                    self._SP_()
                    self._network_object_()
                    self.name_last_node('args')
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                with self._optional():
                    self._NL_()
                    self._SP_()
                    self._service_object_()
                    self.name_last_node('args')
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()
            self._error('no available options')
        self.ast._define(
            ['args', 'description', 'name', 'type'],
            []
        )

    @tatsumasu()
    def _network_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('host')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.name_last_node('address')
                self._NL_()
            with self._option():
                self._token('subnet')
                self.name_last_node('type')
                self._WS_()
                self._ip4_()
                self.name_last_node('address')
                self._WS_()
                self._ip4_()
                self.name_last_node('mask')
                self._NL_()
            with self._option():
                self._token('subnet')
                self.name_last_node('type')
                self._WS_()
                self._ip6_()
                self.name_last_node('address')
                self._token('/')
                self._int_()
                self.name_last_node('mask')
                self._NL_()
            with self._option():
                self._token('range')
                self.name_last_node('type')
                self._WS_()
                self._ip4_()
                self.name_last_node('start')
                self._WS_()
                self._ip4_()
                self.name_last_node('stop')
                self._NL_()
            with self._option():
                self._token('range')
                self.name_last_node('type')
                self._WS_()
                self._ip6_()
                self.name_last_node('start')
                self._WS_()
                self._ip6_()
                self.name_last_node('stop')
                self._NL_()
            with self._option():
                self._token('fqdn')
                self.name_last_node('type')
                self._WS_()
                with self._optional():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('v4')
                            with self._option():
                                self._token('v6')
                            self._error('no available options')
                    self.name_last_node('limit')
                    self._WS_()
                self._string_()
                self.name_last_node('fqdn')
                self._NL_()
            with self._option():
                self._token('nat')
                self.name_last_node('type')
                self._TOEOL_()
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['address', 'fqdn', 'limit', 'mask', 'start', 'stop', 'type'],
            []
        )

    @tatsumasu()
    def _service_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._icmp_type_()
                            with self._option():
                                self._int_()
                            self._error('no available options')
                    self.name_last_node('icmp_type')
                    with self._optional():
                        self._WS_()
                        self._int_()
                        self.name_last_node('icmp_code')
                self._NL_()
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._protocol_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                self._service_object_source_()
                self.name_last_node('source')
                with self._optional():
                    self._WS_()
                self._service_object_destination_()
                self.name_last_node('destination')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._int_()
                self.name_last_node('protocol')
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['destination', 'icmp_code', 'icmp_type', 'protocol', 'source', 'type'],
            []
        )

    @tatsumasu()
    def _service_object_op_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('lt')
                        with self._option():
                            self._token('gt')
                        with self._option():
                            self._token('eq')
                        with self._option():
                            self._token('neq')
                        self._error('no available options')
                self._WS_()
                self._port_()
            with self._option():
                self._token('range')
                self._WS_()
                self._port_()
                self._WS_()
                self._port_()
            self._error('no available options')

    @tatsumasu()
    def _service_object_source_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('source')
                self._WS_()
                self._service_object_op_()
                self.name_last_node('@')
            with self._option():
                self._void()
            self._error('no available options')

    @tatsumasu()
    def _service_object_destination_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('destination')
                self._WS_()
                self._service_object_op_()
                self.name_last_node('@')
            with self._option():
                self._void()
            self._error('no available options')

    @tatsumasu()
    def _object_group_(self):  # noqa
        self._token('object-group')
        self._WS_()
        self._object_group_type_()

    @tatsumasu()
    def _protocol_icmp_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('icmp')
            with self._option():
                self._token('icmp6')
            self._error('no available options')

    @tatsumasu()
    def _protocol_(self):  # noqa
        self._port_group_protocol_()

    @tatsumasu()
    def _port_group_protocol_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('tcp-udp')
                with self._option():
                    self._token('tcp')
                with self._option():
                    self._token('udp')
                self._error('no available options')

    @tatsumasu()
    def _object_group_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('network')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()

                def block4():
                    self._SP_()
                    self._network_group_object_()
                self._closure(block4)
                self.name_last_node('objects')
            with self._option():
                self._token('service')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._WS_()
                self._port_group_protocol_()
                self.name_last_node('type')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()

                def block9():
                    self._SP_()
                    self._port_group_object_()
                self._closure(block9)
                self.name_last_node('objects')
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()

                def block14():
                    self._SP_()
                    self._service_group_object_()
                self._closure(block14)
                self.name_last_node('objects')
            with self._option():
                self._token('icmp-type')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()

                def block19():
                    self._SP_()
                    self._icmp_group_object_()
                self._closure(block19)
                self.name_last_node('objects')
            with self._option():
                self._token('protocol')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern(r'[^\n]+')
                    self.name_last_node('description')
                    self._NL_()

                def block24():
                    self._SP_()
                    self._protocol_group_object_()
                self._closure(block24)
                self.name_last_node('objects')
            self._error('no available options')
        self.ast._define(
            ['description', 'name', 'objects', 'type'],
            []
        )

    @tatsumasu()
    def _service_group_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._icmp_type_()
                            with self._option():
                                self._int_()
                            self._error('no available options')
                    self.name_last_node('icmp_type')
                    with self._optional():
                        self._WS_()
                        self._int_()
                        self.name_last_node('icmp_code')
                self._NL_()
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                self._protocol_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                self._service_object_source_()
                self.name_last_node('source')
                with self._optional():
                    self._WS_()
                self._service_object_destination_()
                self.name_last_node('destination')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._protocol_code_()
                        with self._option():
                            self._int_()
                        self._error('no available options')
                self.name_last_node('protocol')
                self._NL_()
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                self._token('object')
                self.name_last_node('protocol')
                self._WS_()
                self._acl_object_service_id_()
                self.name_last_node('object')
                self._NL_()
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_service_id_()
                self.name_last_node('object')
                self._NL_()
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['destination', 'icmp_code', 'icmp_type', 'object', 'protocol', 'source', 'type'],
            []
        )

    @tatsumasu()
    def _port_group_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('port-object')
                self._WS_()
                self._token('eq')
                self._WS_()
                self._port_()
                self._NL_()
            with self._option():
                self._token('port-object')
                self._WS_()
                self._token('range')
                self._WS_()
                self._port_()
                self._WS_()
                self._port_()
                self._NL_()
            with self._option():
                self._token('group-object')
                self._WS_()
                self._acl_object_group_service_id_()
                self._NL_()
            with self._option():
                self._void()
            self._error('no available options')

    @tatsumasu()
    def _network_group_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                self._token('host')
                self.name_last_node('name')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_names_id_()
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.name_last_node('address')
                self._NL_()
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                self._token('object')
                self.name_last_node('name')
                self._WS_()
                self._acl_object_network_id_()
                self.name_last_node('object')
                self._NL_()
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_names_id_()
                        with self._option():
                            self._ip4_()
                        self._error('no available options')
                self.name_last_node('name')
                self._WS_()
                self._ip4_()
                self.name_last_node('netmask')
                self._NL_()
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_names_id_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.name_last_node('name')
                self._token('/')
                self._int_()
                self.name_last_node('netmask')
                self._NL_()
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_network_id_()
                self.name_last_node('object')
                self._NL_()
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['address', 'name', 'netmask', 'object', 'type'],
            []
        )

    @tatsumasu()
    def _icmp_group_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('icmp-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._icmp_type_()
                        with self._option():
                            self._int_()
                        self._error('no available options')
                self.name_last_node('name')
                self._NL_()
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_icmp_id_()
                self.name_last_node('name')
                self._NL_()
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @tatsumasu()
    def _protocol_group_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('protocol-object')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_protocol_id_()
                self.name_last_node('name')
                self._NL_()
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @tatsumasu()
    def _port_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._port_code_()
                with self._option():
                    self._int_()
                self._error('no available options')

    @tatsumasu()
    def _hour_(self):  # noqa
        self._pattern(r'[0-9]{1,2}')

    @tatsumasu()
    def _minute_(self):  # noqa
        self._pattern(r'[0-9]{1,2}')

    @tatsumasu()
    def _time_(self):  # noqa
        self._hour_()
        self.name_last_node('hour')
        self._token(':')
        self._minute_()
        self.name_last_node('minute')
        self.ast._define(
            ['hour', 'minute'],
            []
        )

    @tatsumasu()
    def _year_(self):  # noqa
        self._pattern(r'[0-9]{4}')

    @tatsumasu()
    def _day_(self):  # noqa
        self._pattern(r'[0-9]{1,2}')

    @tatsumasu()
    def _date_(self):  # noqa
        self._day_()
        self.name_last_node('day')
        self._WS_()
        self._month_()
        self.name_last_node('month')
        self._WS_()
        self._year_()
        self.name_last_node('year')
        self.ast._define(
            ['day', 'month', 'year'],
            []
        )

    @tatsumasu()
    def _timedate_(self):  # noqa
        self._hour_()
        self.name_last_node('hour')
        self._token(':')
        self._minute_()
        self.name_last_node('minute')

        self._WS_()
        self._day_()
        self.name_last_node('day')
        self._WS_()
        self._month_()
        self.name_last_node('month')
        self._WS_()
        self._year_()
        self.name_last_node('year')
        self.ast._define(
            ['day', 'hour', 'minute', 'month', 'year'],
            []
        )

    @tatsumasu()
    def _time_range_object_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('periodic')
                self.name_last_node('type')
                self._WS_()

                def block2():
                    self._day_of_the_week_()
                self._positive_closure(block2)
                self.name_last_node('days')
                self._WS_()
                self._time_()
                self.name_last_node('start')
                self._WS_()
                self._token('to')
                self._WS_()
                with self._optional():
                    self._day_of_the_week_()
                    self._WS_()
                self.name_last_node('edays')
                self._time_()
                self.name_last_node('end')
                self._NL_()
            with self._option():
                self._token('periodic')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('weekdays')
                        with self._option():
                            self._token('weekend')
                        with self._option():
                            self._token('daily')
                        self._error('no available options')
                self.add_last_node_to_name('days')
                self._WS_()
                self._time_()
                self.name_last_node('start')
                self._WS_()
                self._token('to')
                self._WS_()
                self._time_()
                self.name_last_node('end')
                self._NL_()
            with self._option():
                self._token('absolute')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._token('start')
                    self._WS_()
                    self._timedate_()
                    self.name_last_node('start')
                with self._optional():
                    self._WS_()
                    self._token('end')
                    self._WS_()
                    self._timedate_()
                    self.name_last_node('end')
                self._NL_()
            with self._option():
                self._token('no')
                self.name_last_node('type')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['edays', 'end', 'start', 'type'],
            ['days']
        )

    @tatsumasu()
    def _time_range_(self):  # noqa
        self._token('time-range')
        self._WS_()
        self._string_()
        self.name_last_node('name')
        self._NL_()

        def block2():
            self._SP_()
            self._time_range_object_()
        self._closure(block2)
        self.name_last_node('objects')
        self.ast._define(
            ['name', 'objects'],
            []
        )

    @tatsumasu()
    def _day_of_the_week_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('Monday')
            with self._option():
                self._token('Tuesday')
            with self._option():
                self._token('Wednesday')
            with self._option():
                self._token('Thursday')
            with self._option():
                self._token('Friday')
            with self._option():
                self._token('Saturday')
            with self._option():
                self._token('Sunday')
            self._error('no available options')

    @tatsumasu()
    def _month_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('January')
            with self._option():
                self._token('February')
            with self._option():
                self._token('March')
            with self._option():
                self._token('April')
            with self._option():
                self._token('May')
            with self._option():
                self._token('June')
            with self._option():
                self._token('July')
            with self._option():
                self._token('August')
            with self._option():
                self._token('September')
            with self._option():
                self._token('October')
            with self._option():
                self._token('November')
            with self._option():
                self._token('December')
            self._error('no available options')

    @tatsumasu()
    def _icmp_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('unreachable')
            with self._option():
                self._token('ttl-exceeded')
            with self._option():
                self._token('traceroute')
            with self._option():
                self._token('timestamp-request')
            with self._option():
                self._token('timestamp-reply')
            with self._option():
                self._token('time-exceeded')
            with self._option():
                self._token('source-route-failed')
            with self._option():
                self._token('source-quench')
            with self._option():
                self._token('router-solicitation')
            with self._option():
                self._token('router-renumbering')
            with self._option():
                self._token('router-advertisement')
            with self._option():
                self._token('redirect')
            with self._option():
                self._token('reassembly-timeout')
            with self._option():
                self._token('protocol-unreachable')
            with self._option():
                self._token('precedence-unreachable')
            with self._option():
                self._token('port-unreachable')
            with self._option():
                self._token('parameter-problem')
            with self._option():
                self._token('packet-too-big')
            with self._option():
                self._token('option-missing')
            with self._option():
                self._token('no-room-for-option')
            with self._option():
                self._token('network-unknown')
            with self._option():
                self._token('net-unreachable')
            with self._option():
                self._token('net-tos-unreachable')
            with self._option():
                self._token('net-tos-redirect')
            with self._option():
                self._token('net-redirect')
            with self._option():
                self._token('neighbor-solicitation')
            with self._option():
                self._token('neighbor-redirect')
            with self._option():
                self._token('neighbor-advertisement')
            with self._option():
                self._token('mobile-redirect')
            with self._option():
                self._token('membership-report')
            with self._option():
                self._token('membership-reduction')
            with self._option():
                self._token('membership-query')
            with self._option():
                self._token('mask-request')
            with self._option():
                self._token('mask-reply')
            with self._option():
                self._token('information-request')
            with self._option():
                self._token('information-reply')
            with self._option():
                self._token('host-unreachable')
            with self._option():
                self._token('host-unknown')
            with self._option():
                self._token('host-tos-unreachable')
            with self._option():
                self._token('host-tos-redirect')
            with self._option():
                self._token('host-redirect')
            with self._option():
                self._token('host-precedence-unreachable')
            with self._option():
                self._token('host-isolated')
            with self._option():
                self._token('general-parameter-problem')
            with self._option():
                self._token('echo-request')
            with self._option():
                self._token('echo-reply')
            with self._option():
                self._token('echo')
            with self._option():
                self._token('dod-net-prohibited')
            with self._option():
                self._token('dod-host-prohibited')
            with self._option():
                self._token('destination-unreachable')
            with self._option():
                self._token('conversion-error')
            with self._option():
                self._token('alternate-address')
            with self._option():
                self._token('administratively-prohibited')
            with self._option():
                self._token('address-mask-request')
            with self._option():
                self._token('address-mask-reply')
            self._error('no available options')

    @tatsumasu()
    def _protocol_code_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('udp')
            with self._option():
                self._token('tcp')
            with self._option():
                self._token('snp')
            with self._option():
                self._token('pptp')
            with self._option():
                self._token('pim')
            with self._option():
                self._token('pcp')
            with self._option():
                self._token('ospf')
            with self._option():
                self._token('nos')
            with self._option():
                self._token('ipsec')
            with self._option():
                self._token('ipinip')
            with self._option():
                self._token('ip')
            with self._option():
                self._token('igrp')
            with self._option():
                self._token('igmp')
            with self._option():
                self._token('icmp6')
            with self._option():
                self._token('icmpv6')
            with self._option():
                self._token('icmp')
            with self._option():
                self._token('gre')
            with self._option():
                self._token('esp')
            with self._option():
                self._token('eigrp')
            with self._option():
                self._token('ahp')
            with self._option():
                self._token('ah')
            self._error('no available options')

    @tatsumasu()
    def _port_code_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('aol')
            with self._option():
                self._token('bgp')
            with self._option():
                self._token('biff')
            with self._option():
                self._token('bootpc')
            with self._option():
                self._token('bootps')
            with self._option():
                self._token('chargen')
            with self._option():
                self._token('citrix-ica')
            with self._option():
                self._token('cmd')
            with self._option():
                self._token('ctiqbe')
            with self._option():
                self._token('daytime')
            with self._option():
                self._token('discard')
            with self._option():
                self._token('domain')
            with self._option():
                self._token('dnsix')
            with self._option():
                self._token('echo')
            with self._option():
                self._token('exec')
            with self._option():
                self._token('finger')
            with self._option():
                self._token('ftp-data')
            with self._option():
                self._token('ftp')
            with self._option():
                self._token('gopher')
            with self._option():
                self._token('https')
            with self._option():
                self._token('h323')
            with self._option():
                self._token('hostname')
            with self._option():
                self._token('ident')
            with self._option():
                self._token('imap4')
            with self._option():
                self._token('irc')
            with self._option():
                self._token('isakmp')
            with self._option():
                self._token('kerberos')
            with self._option():
                self._token('klogin')
            with self._option():
                self._token('kshell')
            with self._option():
                self._token('ldap')
            with self._option():
                self._token('ldaps')
            with self._option():
                self._token('lpd')
            with self._option():
                self._token('login')
            with self._option():
                self._token('lotusnotes')
            with self._option():
                self._token('mobile-ip')
            with self._option():
                self._token('nameserver')
            with self._option():
                self._token('netbios-ns')
            with self._option():
                self._token('netbios-dgm')
            with self._option():
                self._token('netbios-ssn')
            with self._option():
                self._token('netbios-ss')
            with self._option():
                self._token('nfs')
            with self._option():
                self._token('nntp')
            with self._option():
                self._token('non500-isakmp')
            with self._option():
                self._token('ntp')
            with self._option():
                self._token('pcanywhere-status')
            with self._option():
                self._token('pcanywhere-data')
            with self._option():
                self._token('pim-auto-rp')
            with self._option():
                self._token('pop2')
            with self._option():
                self._token('pop3')
            with self._option():
                self._token('pptp')
            with self._option():
                self._token('radius')
            with self._option():
                self._token('radius-acct')
            with self._option():
                self._token('rip')
            with self._option():
                self._token('rpc')
            with self._option():
                self._token('rtsp')
            with self._option():
                self._token('rsh')
            with self._option():
                self._token('secureid-udp')
            with self._option():
                self._token('sip')
            with self._option():
                self._token('smtp')
            with self._option():
                self._token('snmp')
            with self._option():
                self._token('snmptrap')
            with self._option():
                self._token('sqlnet')
            with self._option():
                self._token('ssh')
            with self._option():
                self._token('sunrpc')
            with self._option():
                self._token('syslog')
            with self._option():
                self._token('tacacs')
            with self._option():
                self._token('talk')
            with self._option():
                self._token('telnet')
            with self._option():
                self._token('tftp')
            with self._option():
                self._token('time')
            with self._option():
                self._token('uucp')
            with self._option():
                self._token('who')
            with self._option():
                self._token('whois')
            with self._option():
                self._token('www')
            with self._option():
                self._token('xdmcp')
            self._error('no available options')

    @tatsumasu()
    def _grammar_(self):  # noqa

        def block1():
            self._command_()
            self._cut()
        self._positive_closure(block1)
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _version_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern(r'ASA Version [^\n]*')
                self.name_last_node('version')
                self._NL_()
            with self._option():
                self._pattern(r'FWSM Version [^\n]*')
                self.name_last_node('version')
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['version'],
            []
        )

    @tatsumasu()
    def _command_(self):  # noqa
        with self._choice():
            with self._option():
                self._version_()
            with self._option():
                self._hostname_()
            with self._option():
                self._domain_name_()
            with self._option():
                self._interface_()
            with self._option():
                self._name_()
            with self._option():
                self._time_range_()
            with self._option():
                self._object_()
            with self._option():
                self._object_group_()
            with self._option():
                self._access_list_()
            with self._option():

                def block0():
                    self._access_list_remark_()
                self._positive_closure(block0)
            with self._option():
                self._access_group_()
            with self._option():
                self._ignored_()
            with self._option():
                self._unmatched_()
                self._NL_()
            self._error('no available options')

    @tatsumasu()
    def _interface_detail_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('description')
                self.name_last_node('type')
                self._WS_()
                self._TOEOL_()
                self.name_last_node('value')
                self._NL_()
            with self._option():
                self._token('nameif')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                with self._group():
                    self._token('ip')
                    self._WS_()
                    self._token('address')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    self._ip4_()
                    self._WS_()
                    self._ip4_()
                self.name_last_node('value')
                self._WS_()
                self._token('standby')
                self._WS_()
                self._ip4_()
                self.name_last_node('standby')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                with self._group():
                    self._token('ipv6')
                    self._WS_()
                    self._token('address')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    self._ip6_()
                    self._token('/')
                    self._int_()
                self.name_last_node('value')
                self._WS_()
                self._token('standby')
                self._WS_()
                self._ip6_()
                self.name_last_node('standby')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                with self._optional():
                    self._token('no')
                    self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._void()
            self._error('no available options')
        self.ast._define(
            ['standby', 'type', 'value'],
            []
        )

    @tatsumasu()
    def _name_(self):  # noqa
        self._token('name')
        self._WS_()
        with self._group():
            with self._choice():
                with self._option():
                    self._ip4_()
                with self._option():
                    self._ip6_()
                self._error('no available options')
        self.name_last_node('address')
        self._WS_()
        self._identifier_()
        self.name_last_node('hostname')
        with self._optional():
            self._WS_()
            self._token('description')
            self._pattern(r'[^\n]+')
            self.name_last_node('description')
        self._NL_()
        self.ast._define(
            ['address', 'description', 'hostname'],
            []
        )

    @tatsumasu()
    def _access_list_rule_extended_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._acl_extended_()
                self.name_last_node('extended')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                self._WS_()
                self._acl_icmp_node_()
                self.name_last_node('src')
                self._WS_()
                self._acl_icmp_node_()
                self.name_last_node('dst')
                self._acl_icmp_options_()
                self.name_last_node('icmp')
                with self._optional():
                    self._WS_()
                    self._acl_options_()
                    self.name_last_node('options')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._acl_extended_()
                self.name_last_node('extended')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_protocol_()
                self.name_last_node('protocol')
                self._WS_()
                self._node_()
                self.name_last_node('src')
                self._WS_()
                self._node_()
                self.name_last_node('dst')
                with self._optional():
                    self._WS_()
                    self._acl_options_()
                    self.name_last_node('options')
                with self._optional():
                    self._WS_()
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['dst', 'extended', 'icmp', 'id', 'mode', 'options', 'protocol', 'src'],
            []
        )

    @tatsumasu()
    def _access_list_rule_standard_(self):  # noqa
        self._token('access-list')
        self._WS_()
        self._acl_id_()
        self.name_last_node('id')
        self._WS_()
        self._token('standard')
        self.name_last_node('extended')
        self._WS_()
        self._acl_mode_()
        self.name_last_node('mode')
        self._WS_()
        self._acl_host_()
        self.name_last_node('src')
        with self._optional():
            self._WS_()
        self._NL_()
        self.ast._define(
            ['extended', 'id', 'mode', 'src'],
            []
        )

    @tatsumasu()
    def _access_list_rule_webtype_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._token('webtype')
                self.name_last_node('extended')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._token('url')
                self.name_last_node('protocol')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._string_()
                        with self._option():
                            self._token('any')
                        self._error('no available options')
                self.name_last_node('url')
                with self._optional():
                    self._WS_()
                    self._acl_options_()
                    self.name_last_node('options')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._token('webtype')
                self.name_last_node('extended')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._token('tcp')
                self.name_last_node('protocol')
                self._WS_()
                self._node_()
                self.name_last_node('dst')
                with self._optional():
                    self._WS_()
                    self._acl_options_()
                    self.name_last_node('options')
                with self._optional():
                    self._WS_()
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['dst', 'extended', 'id', 'mode', 'options', 'protocol', 'url'],
            []
        )

    @tatsumasu()
    def _access_list_rule_ethertype_(self):  # noqa
        self._token('access-list')
        self._WS_()
        self._acl_id_()
        self.name_last_node('id')
        self._WS_()
        self._token('ethertype')
        self.name_last_node('extended')
        self._TOEOL_()
        self._NL_()
        self.ast._define(
            ['extended', 'id'],
            []
        )

    @tatsumasu()
    def _access_list_(self):  # noqa
        with self._choice():
            with self._option():

                def block1():
                    self._access_list_remark_()
                self._positive_closure(block1)
                self.name_last_node('remark')
                with self._choice():
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_extended_()
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._protocol_icmp_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('dst')
                        self._acl_icmp_options_()
                        self.name_last_node('icmp')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_extended_()
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._node_()
                        self.name_last_node('dst')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    self._error('no available options')
            with self._option():
                with self._choice():
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_extended_()
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._protocol_icmp_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('dst')
                        self._acl_icmp_options_()
                        self.name_last_node('icmp')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_extended_()
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._node_()
                        self.name_last_node('dst')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    self._error('no available options')
            with self._option():

                def block35():
                    self._access_list_remark_()
                self._positive_closure(block35)
                self.name_last_node('remark')
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._token('standard')
                self.name_last_node('extended')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_host_()
                self.name_last_node('src')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._token('standard')
                self.name_last_node('extended')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_host_()
                self.name_last_node('src')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():

                def block45():
                    self._access_list_remark_()
                self._positive_closure(block45)
                self.name_last_node('remark')
                with self._choice():
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._token('webtype')
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._token('url')
                        self.name_last_node('protocol')
                        self._WS_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._string_()
                                with self._option():
                                    self._token('any')
                                self._error('no available options')
                        self.name_last_node('url')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._token('webtype')
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._token('tcp')
                        self.name_last_node('protocol')
                        self._WS_()
                        self._node_()
                        self.name_last_node('dst')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    self._error('no available options')
            with self._option():
                with self._choice():
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._token('webtype')
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._token('url')
                        self.name_last_node('protocol')
                        self._WS_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._string_()
                                with self._option():
                                    self._token('any')
                                self._error('no available options')
                        self.name_last_node('url')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._acl_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._token('webtype')
                        self.name_last_node('extended')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._token('tcp')
                        self.name_last_node('protocol')
                        self._WS_()
                        self._node_()
                        self.name_last_node('dst')
                        with self._optional():
                            self._WS_()
                            self._acl_options_()
                            self.name_last_node('options')
                        with self._optional():
                            self._WS_()
                        self._NL_()
                    self._error('no available options')
            with self._option():

                def block75():
                    self._access_list_remark_()
                self._positive_closure(block75)
                self.name_last_node('remark')
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._token('ethertype')
                self.name_last_node('extended')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('access-list')
                self._WS_()
                self._acl_id_()
                self.name_last_node('id')
                self._WS_()
                self._token('ethertype')
                self.name_last_node('extended')
                self._TOEOL_()
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['dst', 'extended', 'icmp', 'id', 'mode', 'options', 'protocol', 'remark', 'src', 'url'],
            []
        )

    @tatsumasu()
    def _access_list_remark_(self):  # noqa
        self._token('access-list')
        self._WS_()
        self._acl_id_()
        self._WS_()
        self._token('remark')
        self._SP_()
        self._remark_()
        self.name_last_node('remark')
        self._NL_()
        self.ast._define(
            ['remark'],
            []
        )

    @tatsumasu()
    def _access_group_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('access-group')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._WS_()
                self._obj_name_()
                self.name_last_node('direction')
                self._WS_()
                self._token('interface')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('iface')
                with self._optional():
                    self._WS_()
                self._NL_()
            with self._option():
                self._token('access-group')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._WS_()
                self._token('global')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                self._NL_()
            self._error('no available options')
        self.ast._define(
            ['direction', 'iface', 'name', 'type'],
            []
        )

    @tatsumasu()
    def _ignored_indent_(self):  # noqa

        def block0():
            with self._optional():
                self._NL_()
            self._pattern(r'^ [^\n]*')
            self._NL_()
        self._closure(block0)

    @tatsumasu()
    def _ignored_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(':')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('!')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('aaa-server')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('aaa')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('arp-inspection')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('arp')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('asdm')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('auth-prompt')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('boot')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('call-home')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('class-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('clock')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('console')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('Cryptochecksum:')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('crypto')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('dhcpd')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dhcprelay')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dns-guard')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dns')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('dynamic-access-policy-record')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('enable')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('eou')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('established')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('failover')
                with self._optional():
                    self._WS_()
                    self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('firewall')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('fragment')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ftp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('global')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('group-policy')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('hpm')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('http')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('icmp')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ipv6')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ip')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('logging')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mac-address-table')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mac-address')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('monitor-interface')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mtu')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('multicast-routing')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('nac-policy')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('names')
                self._NL_()
            with self._option():
                self._token('nat-control')
                with self._optional():
                    self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('nat')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('no')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ntp')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('pager')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('passwd')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('policy-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('privilege')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('prompt')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('resource')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('router')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('route')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('same-security-traffic')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('service-policy')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('service')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('snmp-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('snmp-server')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('smtp-server')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ssh')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ssl')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('static')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('sysopt')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('tcp-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('telnet')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('terminal')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('tftp-server')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('threat-detection')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('timeout')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('tls-proxy')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('tunnel-group-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('tunnel-group')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('user-identity')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('username')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('virtual')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('vpn-group-policy')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('vpn')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('webvpn')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('xlate-bypass')
                with self._optional():
                    self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('xlate')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            self._error('no available options')

    @tatsumasu()
    def _unmatched_(self):  # noqa
        self._void()


class fwsmSemantics(object):
    def ip4(self, ast):  # noqa
        return ast

    def ipX(self, ast):  # noqa
        return ast

    def ip6(self, ast):  # noqa
        return ast

    def NL(self, ast):  # noqa
        return ast

    def TOEOL(self, ast):  # noqa
        return ast

    def SP(self, ast):  # noqa
        return ast

    def WS(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def int(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def obj_name(self, ast):  # noqa
        return ast

    def hostname(self, ast):  # noqa
        return ast

    def domain_name(self, ast):  # noqa
        return ast

    def description(self, ast):  # noqa
        return ast

    def interface(self, ast):  # noqa
        return ast

    def interface_alias(self, ast):  # noqa
        return ast

    def acl_id(self, ast):  # noqa
        return ast

    def acl_line(self, ast):  # noqa
        return ast

    def acl_extended(self, ast):  # noqa
        return ast

    def acl_mode(self, ast):  # noqa
        return ast

    def acl_protocol(self, ast):  # noqa
        return ast

    def node(self, ast):  # noqa
        return ast

    def acl_object_group_network_id(self, ast):  # noqa
        return ast

    def acl_object_network_id(self, ast):  # noqa
        return ast

    def acl_object_group_service_id(self, ast):  # noqa
        return ast

    def acl_object_service_id(self, ast):  # noqa
        return ast

    def acl_object_group_icmp_id(self, ast):  # noqa
        return ast

    def acl_object_group_protocol_id(self, ast):  # noqa
        return ast

    def acl_names_id(self, ast):  # noqa
        return ast

    def acl_time_range_id(self, ast):  # noqa
        return ast

    def acl_interface_id(self, ast):  # noqa
        return ast

    def acl_host(self, ast):  # noqa
        return ast

    def acl_port(self, ast):  # noqa
        return ast

    def acl_icmp_options(self, ast):  # noqa
        return ast

    def acl_options(self, ast):  # noqa
        return ast

    def acl_option(self, ast):  # noqa
        return ast

    def acl_option_log_option(self, ast):  # noqa
        return ast

    def acl_icmp_node(self, ast):  # noqa
        return ast

    def remark(self, ast):  # noqa
        return ast

    def object(self, ast):  # noqa
        return ast

    def object_type(self, ast):  # noqa
        return ast

    def network_object(self, ast):  # noqa
        return ast

    def service_object(self, ast):  # noqa
        return ast

    def service_object_op(self, ast):  # noqa
        return ast

    def service_object_source(self, ast):  # noqa
        return ast

    def service_object_destination(self, ast):  # noqa
        return ast

    def object_group(self, ast):  # noqa
        return ast

    def protocol_icmp(self, ast):  # noqa
        return ast

    def protocol(self, ast):  # noqa
        return ast

    def port_group_protocol(self, ast):  # noqa
        return ast

    def object_group_type(self, ast):  # noqa
        return ast

    def service_group_object(self, ast):  # noqa
        return ast

    def port_group_object(self, ast):  # noqa
        return ast

    def network_group_object(self, ast):  # noqa
        return ast

    def icmp_group_object(self, ast):  # noqa
        return ast

    def protocol_group_object(self, ast):  # noqa
        return ast

    def port(self, ast):  # noqa
        return ast

    def hour(self, ast):  # noqa
        return ast

    def minute(self, ast):  # noqa
        return ast

    def time(self, ast):  # noqa
        return ast

    def year(self, ast):  # noqa
        return ast

    def day(self, ast):  # noqa
        return ast

    def date(self, ast):  # noqa
        return ast

    def timedate(self, ast):  # noqa
        return ast

    def time_range_object(self, ast):  # noqa
        return ast

    def time_range(self, ast):  # noqa
        return ast

    def day_of_the_week(self, ast):  # noqa
        return ast

    def month(self, ast):  # noqa
        return ast

    def icmp_type(self, ast):  # noqa
        return ast

    def protocol_code(self, ast):  # noqa
        return ast

    def port_code(self, ast):  # noqa
        return ast

    def grammar(self, ast):  # noqa
        return ast

    def version(self, ast):  # noqa
        return ast

    def command(self, ast):  # noqa
        return ast

    def interface_detail(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def access_list_rule_extended(self, ast):  # noqa
        return ast

    def access_list_rule_standard(self, ast):  # noqa
        return ast

    def access_list_rule_webtype(self, ast):  # noqa
        return ast

    def access_list_rule_ethertype(self, ast):  # noqa
        return ast

    def access_list(self, ast):  # noqa
        return ast

    def access_list_remark(self, ast):  # noqa
        return ast

    def access_group(self, ast):  # noqa
        return ast

    def ignored_indent(self, ast):  # noqa
        return ast

    def ignored(self, ast):  # noqa
        return ast

    def unmatched(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'ip4'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = fwsmParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, fwsmParser, name='fwsm')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
