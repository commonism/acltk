NL = ["\r"] "\n";
TOEOL = ?/[^\n]*/?;
SP = " ";
WS = /[ \t]+/;

identifier = ?/[a-zA-Z_][A-Za-z0-9_\-\.]*/?;
int = ?/[0-9]+/?;
string = ?/[\S]+/?;

obj_name = ?/[A-Za-z0-9_\-\.+]*/?;


hostname
	= "hostname" WS hostname:identifier NL
	;

domain_name
	= "domain-name" WS domain_name:identifier
	;


description
	= "description" WS description:?/[^\n]+/? NL
	;


interface
	= "interface" WS alias:interface_alias NL detail:{SP interface_detail}
	;


interface_alias
	= ?/[^\s]+/?
	;

acl_id
	= obj_name
	;

acl_line
	= "line" int
	| ()
	;

acl_extended
	= "extended"
	;

acl_mode
	= ("permit"|"deny")
	;

acl_protocol
	= type:"object-group" WS group:(acl_object_group_service|acl_object_group_protocol)
	| type:"object" WS object:acl_object_service
	| type:`name` name:(protocol_code|protocol_int)
	;

node
	= host:acl_host [WS port:acl_port]
	;

acl_object_group_network_id
	= !()
	;

acl_object_group_network
    = &(acl_object_group_network_id (WS|NL)) name:acl_object_group_network_id
    ;

acl_object_network_id
	= !()
	;

acl_object_network
    = &(acl_object_network_id (WS|NL)) name:acl_object_network_id
    ;

acl_object_group_service_id
	= !()
	;

acl_object_group_service
    = &(acl_object_group_service_id (WS|NL)) name:acl_object_group_service_id
    ;


acl_object_group_port_id
    = !()
    ;

acl_object_group_port
    = &(acl_object_group_port_id (WS|NL)) name:acl_object_group_port_id
    ;

acl_object_service_id
	= !()
	;

acl_object_service
	= &(acl_object_service_id (WS|NL)) name:acl_object_service_id
	;

acl_object_group_icmp_id
	= !()
	;

acl_object_group_icmp
	= &(acl_object_group_icmp_id (WS|NL)) name:acl_object_group_icmp_id
	;

acl_object_group_protocol_id
	= !()
	;

acl_object_group_protocol
	= &(acl_object_group_protocol_id (WS|NL)) name:acl_object_group_protocol_id
	;


acl_names_id
	= !()
	;

acl_name_ws
	= &(acl_names_id (WS|NL)) name:acl_names_id
	;

acl_name_slash
    = &(acl_names_id "/") name:acl_names_id
    ;

acl_name
    = @:acl_name_ws
    | @:acl_name_slash
    ;

acl_time_range_id
	= !()
	;

acl_time_range
	= &(acl_time_range_id (WS|NL)) name:acl_time_range_id
	;


acl_interface_id
	= !()
	;

acl_interface
    = &(acl_interface_id (WS|NL)) name:acl_interface_id
    ;

acl_internal_id
    = !()
    ;

acl_internal
    = name:acl_internal_id
    ;

acl_host
	= type:("host"|"ip") WS address:(acl_name|ip4|ip6)
	| type:"interface" WS name:identifier
	| type:("any"|"any4"|"any6")
	| type:"object" WS object:acl_object_network
	| type:"object-group" WS group:acl_object_group_network
	| type:`network` address:(acl_name_ws|ip4) WS netmask:ip4
	| type:`network` address:(acl_name_slash|ip6) "/" netmask:int
	;

acl_port
	= type:"object-group" WS group:acl_object_group_service
	| type:"object-group" WS group:acl_object_group_port
	| type:`port` op:("gt"|"lt"|"eq"|"neq") WS port:port
	| type:"range" WS start:port WS stop:port
	;

acl_icmp_options
	= WS type:"object-group" WS group:acl_object_group_icmp
	| WS type:icmp_type [WS code:icmp_code_int]
	| ()
	;

acl_options
	= {acl_option [WS]}
	;

acl_option
	= type:"log" options:{WS acl_option_log_option}*
	| type:"time-range" WS option:acl_time_range
	| type:"inactive"
	| ()
	;


(* [log [[disable|default]|level] interval secs] *)
(* access-list access_list_name [extended] {deny|permit}...[log [[level] [interval secs] |disable|default]] *)

acl_option_log_option
	= ("debugging"|"disable"|"default"|"notifications"|"warnings"|"critical")
	| "interval" WS int
	| ("0"|"1"|"2"|"3"|"4"|"5"|"6"|"7")
	| ()
	;

acl_icmp_node
	= acl_host
	;

remark
	= (?/[^\n]*/?)
	;

object
	= "object" WS object_type
	;

object_type
	= type:"network" WS name:obj_name [NL SP args:network_object] [SP nat:network_object_nat] [SP >description]
	| type:"service" WS name:obj_name [NL SP args:service_object] [SP >description]
	;

network_object
	= type:"host" WS address:(ip4|ip6) NL
	| type:"subnet" WS address:ip4 WS mask:ip4 NL
	| type:"subnet" WS address:ip6 "/" mask:int NL
	| type:"range" WS start:ip4 WS stop:ip4 NL
	| type:"range" WS start:ip6 WS stop:ip6 NL
	| type:"fqdn" WS [limit:("v4"|"v6") WS] fqdn:string NL
	| type:`nat` nat:network_object_nat
	;


(* Network Object NAT

    Configuring Dynamic NAT
 nat
    [ ( real_ifc , mapped_ifc ) ]
    dynamic
    mapped_obj
    [ interface [ ipv6 ]]
    [ dns ]


    Configuring Dynamic PAT (Hide)
 nat
    [ ( real_ifc , mapped_ifc ) ]
    dynamic
    { mapped_inline_host_ip | mapped_obj | pat-pool mapped_obj [ round-robin ] [ extended ] [ flat [ include-reserve ]] | interface [ ipv6 ]}
    [ interface [ ipv6 ]]
    [ dns ]


    Configuring Static NAT or Static NAT-with-Port-Translation
 nat
    [ ( real_ifc , mapped_ifc ) ]
    static
    { mapped_inline_ip | mapped_obj | interface [ ipv6 ]}
    [ net-to-net ]
    [ dns | service { tcp | udp } real_port mapped_port ]
    [ no-proxy-arp ]


    Configuring Identity NAT
 nat
    [ ( real_ifc , mapped_ifc ) ]
    static
    { mapped_inline_ip | mapped_obj }
    [ no-proxy-arp ]
    [ route-lookup ]

*)

network_object_nat
	= "nat" WS iface:nat_interfaces WS type:"dynamic" WS mapped:network_nat_mapped options:{WS network_object_nat_options}* [WS] NL
	| "nat" WS iface:nat_interfaces WS type:"static" WS mapped:network_nat_mapped [WS service:network_object_nat_service] options:{WS network_object_nat_options}* [WS] NL
	;

nat_interfaces
	= "(" real:("any"|acl_interface_id) "," mapped:("any"|acl_interface_id) ")"
	;

network_nat_mapped
	= type:`object` object:acl_object_network [WS fallback:nat_mapped_fallback]
	| type:`group` object:acl_object_group_network [WS fallback:nat_mapped_fallback]
	| type:`address` address:ip4 [WS fallback:nat_mapped_fallback]
	| type:`address` address:ip6 ["/" mask:int] [WS fallback:nat_mapped_fallback]
	| type:"interface" option:[WS "ipv6"]
	| type:`pool` pool:pat_pool [WS fallback:nat_mapped_fallback]
	;

nat_mapped_fallback
    = interface:"interface" [WS ipv6:"ipv6"]
    ;

network_object_nat_options
    = "route-lookup"
    | "no-proxy-arp"
    | "dns"
    ;

network_object_nat_service
    = type:"service" WS protocol:("tcp"|"udp") WS real:port WS mapped:port
    | type:"dns"
    ;


pat_pool_option
	= "round-robin"
	| "extended"
	| "flat" [WS "include-reserve"]
	;

pat_pool_options
	= {WS pat_pool_option}*
	;

pat_pool_range
    = acl_object_group_network
    | acl_object_network
    ;

pat_pool
	= "pat-pool" WS range:pat_pool_range [options:pat_pool_options]
	;



service_object
	= type:"service" WS protocol:protocol_icmp [WS icmp_type:icmp_type [WS icmp_code:icmp_code_int]] NL
	| type:"service" WS protocol:protocol_tcp_udp [WS] src:service_object_source [WS] dst:service_object_destination [WS] NL
	| type:"service" WS protocol:protocol_int NL
	;

service_object_op
	= ("lt"|"gt"|"eq"|"neq") WS port
	| "range" WS port WS port
	;

service_object_source
	= "source" WS @:service_object_op
	| ()
	;

service_object_destination
	= "destination" WS @:service_object_op
	| ()
	;

object_group
	= "object-group" WS object_group_type
	;

protocol_icmp
	= "icmp"
	| "icmp6"
	;

protocol_tcp_udp
	= ("tcp-udp"|"tcp"|"udp")
	;

object_group_type
	= type:"network" WS name:obj_name NL [SP >description] objects:{SP network_group_object}
	(* PR 8.3 *)
	| "service" WS name:obj_name WS type:protocol_tcp_udp NL [SP >description] objects:{SP port_group_object}
	(* PR 9.3 *)
	| type:"service" WS name:obj_name NL [SP >description] objects:{SP service_group_object}
	| type:"icmp-type" WS name:obj_name NL [SP >description] objects:{SP icmp_group_object}
	| type:"protocol" WS name:obj_name NL [SP >description] objects:{SP protocol_group_object}
	;

service_group_object
	= type:"service-object" WS protocol:protocol_icmp [WS icmp_type:icmp_type [WS icmp_code:icmp_code_int]] [WS] NL
	| type:"service-object" WS protocol:protocol_tcp_udp [WS] src:service_object_source [WS] dst:service_object_destination [WS] NL
	| type:"service-object" WS protocol:(protocol_code|protocol_int) NL
	| type:"service-object" WS protocol:"object" WS object:acl_object_service NL
	| type:"group-object" WS group:acl_object_group_service NL
	| ()
	;

port_group_object
	= "port-object" WS "eq" WS port NL
	| "port-object" WS "range" WS port WS port NL
	| "group-object" WS acl_object_group_port NL
	| ()
	;

network_group_object
	= type:"network-object" WS name:"host" WS address:(acl_name_ws|ip4|ip6) NL
	| type:"network-object" WS name:"object" WS object:acl_object_network NL
	| type:"network-object" WS name:(acl_name_ws|ip4) WS netmask:ip4 NL
	| type:"network-object" WS name:(acl_name_slash|ip6) "/" netmask:int NL
	| type:"group-object" WS group:acl_object_group_network NL
	| ()
	;

icmp_group_object
	= type:"icmp-object" WS name:icmp_type NL
	| type:"group-object" WS group:acl_object_group_icmp NL
	| ()
	;


protocol_group_object
	= type:"protocol-object" WS name:obj_name NL
	| type:"group-object" WS group:acl_object_group_protocol NL
	| ()
	;

port
	= &(port_code (WS|NL)) port_code
	| port_int
	;

hour
	= ?/[0-9]{1,2}/?
	;

minute
	= ?/[0-9]{1,2}/?
	;

time
	= hour:hour ":" minute:minute
	;

year
	= ?/[0-9]{4}/?
	;

day =
	?/[0-9]{1,2}/?
	;


date
	= day:day WS month:month WS year:year
	;

timedate
	= >time WS >date
	;

time_range_object
	= type:"periodic" WS days:{day_of_the_week}+ WS start:time WS "to" WS edays:[day_of_the_week WS] end:time NL
	| type:"periodic" WS days+:("weekdays"|"weekend"|"daily") WS start:time WS "to" WS end:time NL
	| type:"absolute" [WS "start" WS start:timedate] [WS "end" WS end:timedate] NL
	| type:"no" WS TOEOL NL
	;

time_range
	= 'time-range' WS name:string NL objects:{SP time_range_object}*
	;


day_of_the_week
	= "Monday"
	| "Tuesday"
	| "Wednesday"
	| "Thursday"
	| "Friday"
	| "Saturday"
	| "Sunday"
	;

month
	= "January"
	| "February"
	| "March"
	| "April"
	| "May"
	| "June"
	| "July"
	| "August"
	| "September"
	| "October"
	| "November"
	| "December"
	;

# https://www.cisco.com/c/en/us/td/docs/security/asa/asa72/configuration/guide/conf_gd/ports.html#wp1021334%0A

icmp_type
    = &(icmp_type_name (WS|NL)) icmp_type_name
    | icmp_type_int
    ;

icmp_type_name
	= "unreachable"
	| "ttl-exceeded"
	| "traceroute"
	| "timestamp-request"
	| "timestamp-reply"
	| "time-exceeded"
	| "source-route-failed"
	| "source-quench"
	| "router-solicitation"
	| "router-renumbering"
	| "router-advertisement"
	| "redirect"
	| "reassembly-timeout"
	| "protocol-unreachable"
	| "precedence-unreachable"
	| "port-unreachable"
	| "parameter-problem"
	| "packet-too-big"
	| "option-missing"
	| "no-room-for-option"
	| "network-unknown"
	| "net-unreachable"
	| "net-tos-unreachable"
	| "net-tos-redirect"
	| "net-redirect"
	| "neighbor-solicitation"
	| "neighbor-redirect"
	| "neighbor-advertisement"
	| "mobile-redirect"
	| "membership-report"
	| "membership-reduction"
	| "membership-query"
	| "mask-request"
	| "mask-reply"
	| "information-request"
	| "information-reply"
	| "host-unreachable"
	| "host-unknown"
	| "host-tos-unreachable"
	| "host-tos-redirect"
	| "host-redirect"
	| "host-precedence-unreachable"
	| "host-isolated"
	| "general-parameter-problem"
	| "echo-request"
	| "echo-reply"
	| "echo"
	| "dod-net-prohibited"
	| "dod-host-prohibited"
	| "destination-unreachable"
	| "conversion-error"
	| "alternate-address"
	| "administratively-prohibited"
	| "address-mask-request"
	| "address-mask-reply"
	;

icmp_type_int
	= int
	;

icmp_code_int
	= int
	;

protocol_code
	= "udp"
	| "tcp"
	| "snp"
	| "pptp"
	| "pim"
	| "pcp"
	| "ospf"
	| "nos"
	| "ipsec"
	| "ipinip"
	| "ip"
	| "igrp"
	| "igmp"
	| "icmp6"
	| "icmpv6"
	| "icmp"
	| "gre"
	| "esp"
	| "eigrp"
	| "ahp"
	| "ah"
	;

protocol_int
	= int
	;

port_code
	= "xdmcp"
	| "www"
	| "whois"
	| "who"
	| "uucp"
	| "time"
	| "tftp"
	| "telnet"
	| "talk"
	| "tacacs"
	| "syslog"
	| "sunrpc"
	| "ssh"
	| "sqlnet"
	| "snmptrap"
	| "snmp"
	| "smtp"
	| "sip"
	| "secureid-udp"
	| "rtsp"
	| "rsh"
	| "rpc"
	| "rip"
	| "radius-acct"
	| "radius"
	| "pptp"
	| "pop3"
	| "pop2"
	| "pim-auto-rp"
	| "pcanywhere-status"
	| "pcanywhere-data"
	| "ntp"
	| "non500-isakmp"
	| "nntp"
	| "nfs"
	| "netbios-ssn"
	| "netbios-ss"
	| "netbios-ns"
	| "netbios-dgm"
	| "nameserver"
	| "mobile-ip"
	| "lpd"
	| "lotusnotes"
	| "login"
	| "ldaps"
	| "ldap"
	| "kshell"
	| "klogin"
	| "kerberos"
	| "isakmp"
	| "irc"
	| "imap4"
	| "ident"
	| "https"
	| "http"
	| "hostname"
	| "h323"
	| "gopher"
	| "ftp-data"
	| "ftp"
	| "finger"
	| "exec"
	| "echo"
	| "domain"
	| "dnsix"
	| "discard"
	| "daytime"
	| "ctiqbe"
	| "cmd"
	| "citrix-ica"
	| "chargen"
	| "bootps"
	| "bootpc"
	| "biff"
	| "bgp"
	| "aol"
	;

port_int
	= int
	;
