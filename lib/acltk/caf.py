#!/usr/bin/env python3

# WARNING: CAVEAT UTILITOR
#
#  This file was automatically generated by TatSu.
#
#     https://pypi.python.org/pypi/tatsu/
#
#  Any changes you make to it will be overwritten the next time
#  the file is generated.

# ruff: noqa: C405, COM812, I001, F401, PLR1702, PLC2801, SIM117

import sys
from pathlib import Path

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main


KEYWORDS: set[str] = set()


class cafBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='ip4',
        )
        config = config.replace(**settings)

        super().__init__(text, config=config)


class cafParser(Parser):
    def __init__(self, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='ip4',
        )
        config = config.replace(**settings)

        super().__init__(config=config)

    @tatsumasu()
    def _ip4_(self):
        self._pattern('(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])')

    @tatsumasu()
    def _ipX_(self):
        self._pattern('\\w+\\.\\w+\\.\\w+\\.\\w+')

    @tatsumasu()
    def _ip6_(self):
        self._pattern('[a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+')

    @tatsumasu()
    def _grammar_(self):
        self._expr_()
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _string_(self):
        self._pattern('[A-Za-z0-9_\\-\\.]+')

    @tatsumasu()
    def _pattern_(self):
        self._pattern('[A-Za-z0-9_\\-\\.\\?\\*\\[\\]\\!\\/]+')

    @tatsumasu()
    def _int_(self):
        self._pattern('[0-9]+')

    @tatsumasu()
    def _comments_(self):

        def block0():
            self._comment_()
        self._positive_closure(block0)

    @tatsumasu()
    def _comment_(self):
        self._token('/*')
        self._pattern('(?:[^*]|(?:\\*[^/]))*')
        self._token('*/')

    @tatsumasu()
    def _op_(self):
        with self._choice():
            with self._option():
                self._token('union')
            with self._option():
                self._token('intersect')
            with self._option():
                self._token('except')
            self._error(
                'expecting one of: '
                "'except' 'intersect' 'union'"
            )

    @tatsumasu()
    def _expr_(self):
        with self._choice():
            with self._option():
                self._expr_r_()
            with self._option():
                self._set_()
            self._error(
                'expecting one of: '
                "'(' 'id' 'ip' <comment> <comments>"
                '<expr_r> <set> <set_expr> <set_id>'
                '<set_ip> <set_r>'
            )

    @tatsumasu()
    def _expr_r_(self):
        self._set_()

        def block0():
            self._op_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._expr_r_()
                    with self._option():
                        self._set_()
                    self._error(
                        'expecting one of: '
                        '<expr_r> <set>'
                    )
        self._positive_closure(block0)

    @tatsumasu()
    def _direction_(self):
        with self._choice():
            with self._option():
                self._token('src')
            with self._option():
                self._token('dst')
            self._error(
                'expecting one of: '
                "'dst' 'src'"
            )

    @tatsumasu()
    def _network_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('ANY4')
                        with self._option():
                            self._token('ANY6')
                        with self._option():
                            self._token('ANY')
                        with self._option():
                            self._token('any4')
                        with self._option():
                            self._token('any6')
                        with self._option():
                            self._token('any')
                        self._error(
                            'expecting one of: '
                            "'ANY' 'ANY4' 'ANY6' 'any' 'any4' 'any6'"
                        )
                self.name_last_node('address')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error(
                            'expecting one of: '
                            '<ip4> <ip6>'
                        )
                self.name_last_node('address')
                with self._optional():
                    self._token('/')
                    self._int_()
                    self.name_last_node('netmask')
                    self._define(['netmask'], [])
                self._define(['address', 'netmask'], [])
            self._error(
                'expecting one of: '
                "'ANY' 'ANY4' 'ANY6' 'any' 'any4' 'any6' "
                '(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-'
                '9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-'
                '4]|1{0,1}[0-9]){0,1}[0-9]) <ip4> <ip6>'
                '[a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+'
            )

    @tatsumasu()
    def _net_(self):

        def block0():
            self._network_()
        self._positive_closure(block0)
        self.name_last_node('object')

    @tatsumasu()
    def _set_ip_(self):
        self._token('ip')
        with self._group():
            self._direction_()
            self._net_()
        self.add_last_node_to_name('ip')
        self._define(
            [],
            ['ip'],
        )

    @tatsumasu()
    def _set_id_(self):
        self._token('id')
        with self._group():
            self._pattern_()

    @tatsumasu()
    def _set_expr_(self):
        self._token('(')
        self._expr_()
        self._token(')')

    @tatsumasu()
    def _set_r_(self):
        with self._choice():
            with self._option():
                self._set_ip_()
            with self._option():
                self._set_expr_()
            with self._option():
                self._comments_()
            self._error(
                'expecting one of: '
                "'(' '/*' 'ip' <comment> <comments>"
                '<set_expr> <set_ip>'
            )

    @tatsumasu()
    def _set_(self):
        with self._optional():
            self._comments_()
        with self._optional():
            self._set_id_()
        self.name_last_node('id')

        def block0():
            self._set_r_()
        self._closure(block0)
        self.name_last_node('objects')
        self._define(['id', 'objects'], [])


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        text = Path(filename).read_text()
    parser = cafParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs,
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, cafParser, name='caf')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
