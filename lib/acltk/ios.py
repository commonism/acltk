#!/usr/bin/env python3

# WARNING: CAVEAT UTILITOR
#
#  This file was automatically generated by TatSu.
#
#     https://pypi.python.org/pypi/tatsu/
#
#  Any changes you make to it will be overwritten the next time
#  the file is generated.

# ruff: noqa: C405, COM812, I001, F401, PLR1702, PLC2801, SIM117

import sys
from pathlib import Path

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main


KEYWORDS: set[str] = set()


class iosBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='ip4',
        )
        config = config.replace(**settings)

        super().__init__(text, config=config)


class iosParser(Parser):
    def __init__(self, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='ip4',
        )
        config = config.replace(**settings)

        super().__init__(config=config)

    @tatsumasu()
    def _ip4_(self):
        self._pattern('(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])')

    @tatsumasu()
    def _ipX_(self):
        self._pattern('\\w+\\.\\w+\\.\\w+\\.\\w+')

    @tatsumasu()
    def _ip6_(self):
        self._pattern('[a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+')

    @tatsumasu()
    def _NL_(self):
        with self._optional():
            self._token('\r')
        self._token('\n')

    @tatsumasu()
    def _TOEOL_(self):
        self._pattern('[^\\n]*')

    @tatsumasu()
    def _SP_(self):
        self._token(' ')

    @tatsumasu()
    def _WS_(self):
        self._pattern('[ \\t]+')

    @tatsumasu()
    def _identifier_(self):
        self._pattern('[a-zA-Z_][A-Za-z0-9_\\-\\.]*')

    @tatsumasu()
    def _int_(self):
        self._pattern('[0-9]+')

    @tatsumasu()
    def _string_(self):
        self._pattern('[\\S]+')

    @tatsumasu()
    def _obj_name_(self):
        self._pattern('[A-Za-z0-9_\\-\\.+]*')

    @tatsumasu()
    def _hostname_(self):
        self._token('hostname')
        self._WS_()
        self._identifier_()
        self.name_last_node('hostname')
        self._NL_()
        self._define(['hostname'], [])

    @tatsumasu()
    def _domain_name_(self):
        self._token('domain-name')
        self._WS_()
        self._identifier_()
        self.name_last_node('domain_name')
        self._define(['domain_name'], [])

    @tatsumasu()
    def _description_(self):
        self._token('description')
        self._WS_()
        self._pattern('[^\\n]+')
        self.name_last_node('description')
        self._NL_()
        self._define(['description'], [])

    @tatsumasu()
    def _interface_(self):
        self._token('interface')
        self._WS_()
        self._interface_alias_()
        self.name_last_node('alias')
        self._NL_()

        def block0():
            self._SP_()
            self._interface_detail_()
        self._closure(block0)
        self.name_last_node('detail')
        self._define(['alias', 'detail'], [])

    @tatsumasu()
    def _interface_alias_(self):
        self._pattern('[^\\s]+')

    @tatsumasu()
    def _acl_id_(self):
        self._obj_name_()

    @tatsumasu()
    def _acl_line_(self):
        with self._choice():
            with self._option():
                self._token('line')
                self._int_()
            with self._option():
                self._void()
            self._error(
                'expecting one of: '
                "'line'"
            )

    @tatsumasu()
    def _acl_extended_(self):
        self._token('extended')

    @tatsumasu()
    def _acl_mode_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('permit')
                with self._option():
                    self._token('deny')
                self._error(
                    'expecting one of: '
                    "'deny' 'permit'"
                )

    @tatsumasu()
    def _acl_protocol_(self):
        with self._choice():
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_object_group_service_()
                        with self._option():
                            self._acl_object_group_protocol_()
                        self._error(
                            'expecting one of: '
                            '<acl_object_group_protocol>'
                            '<acl_object_group_service>'
                        )
                self.name_last_node('group')
                self._define(['group', 'type'], [])
            with self._option():
                self._token('object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_service_()
                self.name_last_node('object')
                self._define(['object', 'type'], [])
            with self._option():
                self._constant('name')
                self.name_last_node('type')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._protocol_code_()
                        with self._option():
                            self._protocol_int_()
                        self._error(
                            'expecting one of: '
                            '<protocol_code> <protocol_int>'
                        )
                self.name_last_node('name')
                self._define(['name', 'type'], [])
            self._error(
                'expecting one of: '
                "'ah' 'ahp' 'eigrp' 'esp' 'gre' 'icmp'"
                "'icmp6' 'icmpv6' 'igmp' 'igrp' 'ip'"
                "'ipinip' 'ipsec' 'ipv6' 'nos' 'object'"
                "'object-group' 'ospf' 'pcp' 'pim' 'pptp'"
                "'snp' 'tcp' 'udp' <int> <protocol_code>"
                '<protocol_int> [0-9]+'
            )

    @tatsumasu()
    def _node_(self):
        self._acl_host_()
        self.name_last_node('host')
        with self._optional():
            self._WS_()
            self._acl_port_()
            self.name_last_node('port')
            self._define(['port'], [])
        self._define(['host', 'port'], [])

    @tatsumasu()
    def _acl_object_group_network_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_network_(self):
        with self._if():
            with self._group():
                self._acl_object_group_network_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_group_network_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_object_network_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_network_(self):
        with self._if():
            with self._group():
                self._acl_object_network_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_network_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_object_group_service_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_service_(self):
        with self._if():
            with self._group():
                self._acl_object_group_service_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_group_service_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_object_group_port_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_port_(self):
        with self._if():
            with self._group():
                self._acl_object_group_port_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_group_port_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_object_service_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_service_(self):
        with self._if():
            with self._group():
                self._acl_object_service_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_service_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_object_group_icmp_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_icmp_(self):
        with self._if():
            with self._group():
                self._acl_object_group_icmp_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_group_icmp_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_object_group_protocol_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_object_group_protocol_(self):
        with self._if():
            with self._group():
                self._acl_object_group_protocol_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_object_group_protocol_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_names_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_name_ws_(self):
        with self._if():
            with self._group():
                self._acl_names_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_names_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_name_slash_(self):
        with self._if():
            with self._group():
                self._acl_names_id_()
                self._token('/')
        self._acl_names_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_name_(self):
        with self._choice():
            with self._option():
                self._acl_name_ws_()
                self.name_last_node('@')
            with self._option():
                self._acl_name_slash_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<acl_name_slash> <acl_name_ws>'
                '<acl_names_id>'
            )

    @tatsumasu()
    def _acl_time_range_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_time_range_(self):
        with self._if():
            with self._group():
                self._acl_time_range_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_time_range_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_interface_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_interface_(self):
        with self._if():
            with self._group():
                self._acl_interface_id_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._WS_()
                        with self._option():
                            self._NL_()
                        self._error(
                            'expecting one of: '
                            '<NL> <WS>'
                        )
        self._acl_interface_id_()
        self.name_last_node('name')
        self._define(['name'], [])

    @tatsumasu()
    def _acl_internal_id_(self):
        with self._ifnot():
            self._void()

    @tatsumasu()
    def _acl_internal_(self):
        self._acl_internal_id_()
        self.name_last_node('name')

    @tatsumasu()
    def _acl_host_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('host')
                        with self._option():
                            self._token('ip')
                        self._error(
                            'expecting one of: '
                            "'host' 'ip'"
                        )
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_name_()
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error(
                            'expecting one of: '
                            '<acl_name> <ip4> <ip6>'
                        )
                self.name_last_node('address')
                self._define(['address', 'type'], [])
            with self._option():
                self._token('interface')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('name')
                self._define(['name', 'type'], [])
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('any')
                        with self._option():
                            self._token('any4')
                        with self._option():
                            self._token('any6')
                        self._error(
                            'expecting one of: '
                            "'any' 'any4' 'any6'"
                        )
                self.name_last_node('type')
            with self._option():
                self._token('object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_network_()
                self.name_last_node('object')
                self._define(['object', 'type'], [])
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_network_()
                self.name_last_node('group')
                self._define(['group', 'type'], [])
            with self._option():
                self._constant('network')
                self.name_last_node('type')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_name_ws_()
                        with self._option():
                            self._ip4_()
                        self._error(
                            'expecting one of: '
                            '<acl_name_ws> <ip4>'
                        )
                self.name_last_node('address')
                self._WS_()
                self._ip4_()
                self.name_last_node('netmask')
                self._define(['address', 'netmask', 'type'], [])
            with self._option():
                self._constant('network')
                self.name_last_node('type')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_name_slash_()
                        with self._option():
                            self._ip6_()
                        self._error(
                            'expecting one of: '
                            '<acl_name_slash> <ip6>'
                        )
                self.name_last_node('address')
                self._token('/')
                self._int_()
                self.name_last_node('netmask')
                self._define(['address', 'netmask', 'type'], [])
            self._error(
                'expecting one of: '
                "'any' 'any4' 'any6' 'host' 'interface'"
                "'ip' 'object' 'object-group' (?:(?:25[0-"
                '5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-'
                '9])\\.){3,3}(?:25[0-5]|(?:2[0-'
                '4]|1{0,1}[0-9]){0,1}[0-9])'
                '<acl_name_slash> <acl_name_ws>'
                '<acl_names_id> <ip4> <ip6>'
                '[a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+'
            )

    @tatsumasu()
    def _acl_port_(self):
        with self._choice():
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_service_()
                self.name_last_node('group')
                self._define(['group', 'type'], [])
            with self._option():
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_port_()
                self.name_last_node('group')
                self._define(['group', 'type'], [])
            with self._option():
                self._constant('port')
                self.name_last_node('type')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('gt')
                        with self._option():
                            self._token('lt')
                        with self._option():
                            self._token('eq')
                        with self._option():
                            self._token('neq')
                        self._error(
                            'expecting one of: '
                            "'eq' 'gt' 'lt' 'neq'"
                        )
                self.name_last_node('op')
                self._WS_()
                self._port_()
                self.name_last_node('port')
                self._define(['op', 'port', 'type'], [])
            with self._option():
                self._token('range')
                self.name_last_node('type')
                self._WS_()
                self._port_()
                self.name_last_node('start')
                self._WS_()
                self._port_()
                self.name_last_node('stop')
                self._define(['start', 'stop', 'type'], [])
            self._error(
                'expecting one of: '
                "'eq' 'gt' 'lt' 'neq' 'object-group'"
                "'range'"
            )

    @tatsumasu()
    def _acl_icmp_options_(self):
        with self._choice():
            with self._option():
                self._WS_()
                self._token('object-group')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_icmp_()
                self.name_last_node('group')
                self._define(['group', 'type'], [])
            with self._option():
                self._WS_()
                self._icmp_type_()
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._icmp_code_int_()
                    self.name_last_node('code')
                    self._define(['code'], [])
                self._define(['code', 'type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
                self._void()
                self._define(['type'], [])
            self._error(
                'expecting one of: '
                '<WS> [ \\t]+'
            )

    @tatsumasu()
    def _acl_options_(self):

        def block0():
            self._acl_option_()
            with self._optional():
                self._WS_()
        self._closure(block0)

    @tatsumasu()
    def _acl_option_(self):
        with self._choice():
            with self._option():
                self._token('log')
                self.name_last_node('type')

                def block0():
                    self._WS_()
                    self._acl_option_log_option_()
                self._closure(block0)
                self.name_last_node('options')
                self._define(['options', 'type'], [])
            with self._option():
                self._token('time-range')
                self.name_last_node('type')
                self._WS_()
                self._acl_time_range_()
                self.name_last_node('option')
                self._define(['option', 'type'], [])
            with self._option():
                self._token('inactive')
                self.name_last_node('type')
            with self._option():
                self._void()
            self._error(
                'expecting one of: '
                "'inactive' 'log' 'time-range'"
            )

    @tatsumasu()
    def _acl_option_log_option_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('debugging')
                        with self._option():
                            self._token('disable')
                        with self._option():
                            self._token('default')
                        with self._option():
                            self._token('notifications')
                        with self._option():
                            self._token('warnings')
                        with self._option():
                            self._token('critical')
                        self._error(
                            'expecting one of: '
                            "'critical' 'debugging' 'default'"
                            "'disable' 'notifications' 'warnings'"
                        )
            with self._option():
                self._token('interval')
                self._WS_()
                self._int_()
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('0')
                        with self._option():
                            self._token('1')
                        with self._option():
                            self._token('2')
                        with self._option():
                            self._token('3')
                        with self._option():
                            self._token('4')
                        with self._option():
                            self._token('5')
                        with self._option():
                            self._token('6')
                        with self._option():
                            self._token('7')
                        self._error(
                            'expecting one of: '
                            "'0' '1' '2' '3' '4' '5' '6' '7'"
                        )
            with self._option():
                self._void()
            self._error(
                'expecting one of: '
                "'0' '1' '2' '3' '4' '5' '6' '7'"
                "'critical' 'debugging' 'default'"
                "'disable' 'interval' 'notifications'"
                "'warnings'"
            )

    @tatsumasu()
    def _acl_icmp_node_(self):
        self._acl_host_()

    @tatsumasu()
    def _remark_(self):
        with self._group():
            self._pattern('[^\\n]*')

    @tatsumasu()
    def _object_(self):
        self._token('object')
        self._WS_()
        self._object_type_()

    @tatsumasu()
    def _object_type_(self):
        with self._choice():
            with self._option():
                self._token('network')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                with self._optional():
                    self._NL_()
                    self._SP_()
                    self._network_object_()
                    self.name_last_node('args')
                    self._define(['args'], [])
                with self._optional():
                    self._SP_()
                    self._network_object_nat_()
                    self.name_last_node('nat')
                    self._define(['nat'], [])
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])
                self._define(['args', 'description', 'name', 'nat', 'type'], [])
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                with self._optional():
                    self._NL_()
                    self._SP_()
                    self._service_object_()
                    self.name_last_node('args')
                    self._define(['args'], [])
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])
                self._define(['args', 'description', 'name', 'type'], [])
            self._error(
                'expecting one of: '
                "'network' 'service'"
            )

    @tatsumasu()
    def _network_object_(self):
        with self._choice():
            with self._option():
                self._token('host')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error(
                            'expecting one of: '
                            '<ip4> <ip6>'
                        )
                self.name_last_node('address')
                self._NL_()
                self._define(['address', 'type'], [])
            with self._option():
                self._token('subnet')
                self.name_last_node('type')
                self._WS_()
                self._ip4_()
                self.name_last_node('address')
                self._WS_()
                self._ip4_()
                self.name_last_node('mask')
                self._NL_()
                self._define(['address', 'mask', 'type'], [])
            with self._option():
                self._token('subnet')
                self.name_last_node('type')
                self._WS_()
                self._ip6_()
                self.name_last_node('address')
                self._token('/')
                self._int_()
                self.name_last_node('mask')
                self._NL_()
                self._define(['address', 'mask', 'type'], [])
            with self._option():
                self._token('range')
                self.name_last_node('type')
                self._WS_()
                self._ip4_()
                self.name_last_node('start')
                self._WS_()
                self._ip4_()
                self.name_last_node('stop')
                self._NL_()
                self._define(['start', 'stop', 'type'], [])
            with self._option():
                self._token('range')
                self.name_last_node('type')
                self._WS_()
                self._ip6_()
                self.name_last_node('start')
                self._WS_()
                self._ip6_()
                self.name_last_node('stop')
                self._NL_()
                self._define(['start', 'stop', 'type'], [])
            with self._option():
                self._token('fqdn')
                self.name_last_node('type')
                self._WS_()
                with self._optional():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('v4')
                            with self._option():
                                self._token('v6')
                            self._error(
                                'expecting one of: '
                                "'v4' 'v6'"
                            )
                    self.name_last_node('limit')
                    self._WS_()
                    self._define(['limit'], [])
                self._string_()
                self.name_last_node('fqdn')
                self._NL_()
                self._define(['fqdn', 'limit', 'type'], [])
            with self._option():
                self._constant('nat')
                self.name_last_node('type')
                self._network_object_nat_()
                self.name_last_node('nat')
                self._define(['nat', 'type'], [])
            self._error(
                'expecting one of: '
                "'fqdn' 'host' 'nat' 'range' 'subnet'"
                '<network_object_nat>'
            )

    @tatsumasu()
    def _network_object_nat_(self):
        with self._choice():
            with self._option():
                self._token('nat')
                self._WS_()
                self._nat_interfaces_()
                self.name_last_node('iface')
                self._WS_()
                self._token('dynamic')
                self.name_last_node('type')
                self._WS_()
                self._network_nat_mapped_()
                self.name_last_node('mapped')

                def block0():
                    self._WS_()
                    self._network_object_nat_options_()
                self._closure(block0)
                self.name_last_node('options')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['iface', 'mapped', 'options', 'type'], [])
            with self._option():
                self._token('nat')
                self._WS_()
                self._nat_interfaces_()
                self.name_last_node('iface')
                self._WS_()
                self._token('static')
                self.name_last_node('type')
                self._WS_()
                self._network_nat_mapped_()
                self.name_last_node('mapped')
                with self._optional():
                    self._WS_()
                    self._network_object_nat_service_()
                    self.name_last_node('service')
                    self._define(['service'], [])

                def block1():
                    self._WS_()
                    self._network_object_nat_options_()
                self._closure(block1)
                self.name_last_node('options')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['iface', 'mapped', 'options', 'service', 'type'], [])
            self._error(
                'expecting one of: '
                "'nat'"
            )

    @tatsumasu()
    def _nat_interfaces_(self):
        self._token('(')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('any')
                with self._option():
                    self._acl_interface_id_()
                self._error(
                    'expecting one of: '
                    "'any' <acl_interface_id>"
                )
        self.name_last_node('real')
        self._token(',')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('any')
                with self._option():
                    self._acl_interface_id_()
                self._error(
                    'expecting one of: '
                    "'any' <acl_interface_id>"
                )
        self.name_last_node('mapped')
        self._token(')')
        self._define(['mapped', 'real'], [])

    @tatsumasu()
    def _network_nat_mapped_(self):
        with self._choice():
            with self._option():
                self._constant('object')
                self.name_last_node('type')
                self._acl_object_network_()
                self.name_last_node('object')
                with self._optional():
                    self._WS_()
                    self._nat_mapped_fallback_()
                    self.name_last_node('fallback')
                    self._define(['fallback'], [])
                self._define(['fallback', 'object', 'type'], [])
            with self._option():
                self._constant('group')
                self.name_last_node('type')
                self._acl_object_group_network_()
                self.name_last_node('object')
                with self._optional():
                    self._WS_()
                    self._nat_mapped_fallback_()
                    self.name_last_node('fallback')
                    self._define(['fallback'], [])
                self._define(['fallback', 'object', 'type'], [])
            with self._option():
                self._constant('address')
                self.name_last_node('type')
                self._ip4_()
                self.name_last_node('address')
                with self._optional():
                    self._WS_()
                    self._nat_mapped_fallback_()
                    self.name_last_node('fallback')
                    self._define(['fallback'], [])
                self._define(['address', 'fallback', 'type'], [])
            with self._option():
                self._constant('address')
                self.name_last_node('type')
                self._ip6_()
                self.name_last_node('address')
                with self._optional():
                    self._token('/')
                    self._int_()
                    self.name_last_node('mask')
                    self._define(['mask'], [])
                with self._optional():
                    self._WS_()
                    self._nat_mapped_fallback_()
                    self.name_last_node('fallback')
                    self._define(['fallback'], [])
                self._define(['address', 'fallback', 'mask', 'type'], [])
            with self._option():
                self._token('interface')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._token('ipv6')
                self.name_last_node('option')
                self._define(['option', 'type'], [])
            with self._option():
                self._constant('pool')
                self.name_last_node('type')
                self._pat_pool_()
                self.name_last_node('pool')
                with self._optional():
                    self._WS_()
                    self._nat_mapped_fallback_()
                    self.name_last_node('fallback')
                    self._define(['fallback'], [])
                self._define(['fallback', 'pool', 'type'], [])
            self._error(
                'expecting one of: '
                "'interface' 'pat-pool' (?:(?:25[0-"
                '5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-'
                '9])\\.){3,3}(?:25[0-5]|(?:2[0-'
                '4]|1{0,1}[0-9]){0,1}[0-9])'
                '<acl_object_group_network>'
                '<acl_object_group_network_id>'
                '<acl_object_network>'
                '<acl_object_network_id> <ip4> <ip6>'
                '<pat_pool> [a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+'
            )

    @tatsumasu()
    def _nat_mapped_fallback_(self):
        self._token('interface')
        self.name_last_node('interface')
        with self._optional():
            self._WS_()
            self._token('ipv6')
            self.name_last_node('ipv6')
            self._define(['ipv6'], [])
        self._define(['interface', 'ipv6'], [])

    @tatsumasu()
    def _network_object_nat_options_(self):
        with self._choice():
            with self._option():
                self._token('route-lookup')
            with self._option():
                self._token('no-proxy-arp')
            with self._option():
                self._token('dns')
            self._error(
                'expecting one of: '
                "'dns' 'no-proxy-arp' 'route-lookup'"
            )

    @tatsumasu()
    def _network_object_nat_service_(self):
        with self._choice():
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('tcp')
                        with self._option():
                            self._token('udp')
                        self._error(
                            'expecting one of: '
                            "'tcp' 'udp'"
                        )
                self.name_last_node('protocol')
                self._WS_()
                self._port_()
                self.name_last_node('real')
                self._WS_()
                self._port_()
                self.name_last_node('mapped')
                self._define(['mapped', 'protocol', 'real', 'type'], [])
            with self._option():
                self._token('dns')
                self.name_last_node('type')
            self._error(
                'expecting one of: '
                "'dns' 'service'"
            )

    @tatsumasu()
    def _pat_pool_option_(self):
        with self._choice():
            with self._option():
                self._token('round-robin')
            with self._option():
                self._token('extended')
            with self._option():
                self._token('flat')
                with self._optional():
                    self._WS_()
                    self._token('include-reserve')
            self._error(
                'expecting one of: '
                "'extended' 'flat' 'round-robin'"
            )

    @tatsumasu()
    def _pat_pool_options_(self):

        def block0():
            self._WS_()
            self._pat_pool_option_()
        self._closure(block0)

    @tatsumasu()
    def _pat_pool_range_(self):
        with self._choice():
            with self._option():
                self._acl_object_group_network_()
            with self._option():
                self._acl_object_network_()
            self._error(
                'expecting one of: '
                '<acl_object_group_network>'
                '<acl_object_group_network_id>'
                '<acl_object_network>'
                '<acl_object_network_id>'
            )

    @tatsumasu()
    def _pat_pool_(self):
        self._token('pat-pool')
        self._WS_()
        self._pat_pool_range_()
        self.name_last_node('range')
        with self._optional():
            self._pat_pool_options_()
            self.name_last_node('options')
        self._define(['options', 'range'], [])

    @tatsumasu()
    def _service_object_(self):
        with self._choice():
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                    self._icmp_type_()
                    self.name_last_node('icmp_type')
                    with self._optional():
                        self._WS_()
                        self._icmp_code_int_()
                        self.name_last_node('icmp_code')
                        self._define(['icmp_code'], [])
                    self._define(['icmp_code', 'icmp_type'], [])
                self._NL_()
                self._define(['icmp_code', 'icmp_type', 'protocol', 'type'], [])
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._protocol_tcp_udp_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                self._service_object_source_()
                self.name_last_node('src')
                with self._optional():
                    self._WS_()
                self._service_object_destination_()
                self.name_last_node('dst')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['dst', 'protocol', 'src', 'type'], [])
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._protocol_int_()
                self.name_last_node('protocol')
                self._NL_()
                self._define(['protocol', 'type'], [])
            self._error(
                'expecting one of: '
                "'service'"
            )

    @tatsumasu()
    def _service_object_op_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('lt')
                        with self._option():
                            self._token('gt')
                        with self._option():
                            self._token('eq')
                        with self._option():
                            self._token('neq')
                        self._error(
                            'expecting one of: '
                            "'eq' 'gt' 'lt' 'neq'"
                        )
                self.name_last_node('op')
                self._WS_()
                self._port_()
                self.name_last_node('port')
                self._define(['op', 'port'], [])
            with self._option():
                self._token('range')
                self.name_last_node('op')
                self._WS_()
                self._port_()
                self.name_last_node('begin')
                self._WS_()
                self._port_()
                self.name_last_node('end')
                self._define(['begin', 'end', 'op'], [])
            self._error(
                'expecting one of: '
                "'eq' 'gt' 'lt' 'neq' 'range'"
            )

    @tatsumasu()
    def _service_object_source_(self):
        with self._choice():
            with self._option():
                self._token('source')
                self._WS_()
                self._service_object_op_()
                self.name_last_node('@')
            with self._option():
                self._void()
            self._error(
                'expecting one of: '
                "'source'"
            )

    @tatsumasu()
    def _service_object_destination_(self):
        with self._choice():
            with self._option():
                self._token('destination')
                self._WS_()
                self._service_object_op_()
                self.name_last_node('@')
            with self._option():
                self._void()
            self._error(
                'expecting one of: '
                "'destination'"
            )

    @tatsumasu()
    def _object_group_(self):
        self._token('object-group')
        self._WS_()
        self._object_group_type_()

    @tatsumasu()
    def _protocol_icmp_(self):
        with self._choice():
            with self._option():
                self._token('icmp')
            with self._option():
                self._token('icmp6')
            self._error(
                'expecting one of: '
                "'icmp' 'icmp6'"
            )

    @tatsumasu()
    def _protocol_tcp_udp_(self):
        with self._choice():
            with self._option():
                self._token('tcp-udp')
            with self._option():
                self._token('tcp')
            with self._option():
                self._token('udp')
            self._error(
                'expecting one of: '
                "'tcp' 'tcp-udp' 'udp'"
            )

    @tatsumasu()
    def _object_group_type_(self):
        with self._choice():
            with self._option():
                self._token('network')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])

                def block0():
                    self._SP_()
                    self._network_group_object_()
                self._closure(block0)
                self.name_last_node('objects')
                self._define(['description', 'name', 'objects', 'type'], [])
            with self._option():
                self._token('service')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._WS_()
                self._protocol_tcp_udp_()
                self.name_last_node('type')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])

                def block1():
                    self._SP_()
                    self._port_group_object_()
                self._closure(block1)
                self.name_last_node('objects')
                self._define(['description', 'name', 'objects', 'type'], [])
            with self._option():
                self._token('service')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])

                def block2():
                    self._SP_()
                    self._service_group_object_()
                self._closure(block2)
                self.name_last_node('objects')
                self._define(['description', 'name', 'objects', 'type'], [])
            with self._option():
                self._token('icmp-type')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])

                def block3():
                    self._SP_()
                    self._icmp_group_object_()
                self._closure(block3)
                self.name_last_node('objects')
                self._define(['description', 'name', 'objects', 'type'], [])
            with self._option():
                self._token('protocol')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                with self._optional():
                    self._SP_()
                    self._token('description')
                    self._WS_()
                    self._pattern('[^\\n]+')
                    self.name_last_node('description')
                    self._NL_()
                    self._define(['description'], [])
                    self._define(['description'], [])

                def block4():
                    self._SP_()
                    self._protocol_group_object_()
                self._closure(block4)
                self.name_last_node('objects')
                self._define(['description', 'name', 'objects', 'type'], [])
            self._error(
                'expecting one of: '
                "'icmp-type' 'network' 'protocol'"
                "'service'"
            )

    @tatsumasu()
    def _service_group_object_(self):
        with self._choice():
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                    self._icmp_type_()
                    self.name_last_node('icmp_type')
                    with self._optional():
                        self._WS_()
                        self._icmp_code_int_()
                        self.name_last_node('icmp_code')
                        self._define(['icmp_code'], [])
                    self._define(['icmp_code', 'icmp_type'], [])
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['icmp_code', 'icmp_type', 'protocol', 'type'], [])
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                self._protocol_tcp_udp_()
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                self._service_object_source_()
                self.name_last_node('src')
                with self._optional():
                    self._WS_()
                self._service_object_destination_()
                self.name_last_node('dst')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['dst', 'protocol', 'src', 'type'], [])
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._protocol_code_()
                        with self._option():
                            self._protocol_int_()
                        self._error(
                            'expecting one of: '
                            '<protocol_code> <protocol_int>'
                        )
                self.name_last_node('protocol')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['protocol', 'type'], [])
            with self._option():
                self._token('service-object')
                self.name_last_node('type')
                self._WS_()
                self._token('object')
                self.name_last_node('protocol')
                self._WS_()
                self._acl_object_service_()
                self.name_last_node('object')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['object', 'protocol', 'type'], [])
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_service_()
                self.name_last_node('group')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['group', 'type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
                self._void()
                self._define(['type'], [])
            self._error(
                'expecting one of: '
                "'group-object' 'service-object'"
            )

    @tatsumasu()
    def _port_group_object_(self):
        with self._choice():
            with self._option():
                self._token('port-object')
                self.name_last_node('type')
                self._WS_()
                self._token('eq')
                self.name_last_node('op')
                self._WS_()
                self._port_()
                self._NL_()
                self._define(['op', 'type'], [])
            with self._option():
                self._token('port-object')
                self.name_last_node('type')
                self._WS_()
                self._token('range')
                self.name_last_node('op')
                self._WS_()
                self._port_()
                self.name_last_node('begin')
                self._WS_()
                self._port_()
                self.name_last_node('end')
                self._NL_()
                self._define(['begin', 'end', 'op', 'type'], [])
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_port_()
                self.name_last_node('object')
                self._NL_()
                self._define(['object', 'type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
                self._void()
                self._define(['type'], [])
            self._error(
                'expecting one of: '
                "'group-object' 'port-object'"
            )

    @tatsumasu()
    def _network_group_object_(self):
        with self._choice():
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                self._token('host')
                self.name_last_node('name')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_name_ws_()
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error(
                            'expecting one of: '
                            '<acl_name_ws> <ip4> <ip6>'
                        )
                self.name_last_node('address')
                self._NL_()
                self._define(['address', 'name', 'type'], [])
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                self._token('object')
                self.name_last_node('name')
                self._WS_()
                self._acl_object_network_()
                self.name_last_node('object')
                self._NL_()
                self._define(['name', 'object', 'type'], [])
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_name_ws_()
                        with self._option():
                            self._ip4_()
                        self._error(
                            'expecting one of: '
                            '<acl_name_ws> <ip4>'
                        )
                self.name_last_node('name')
                self._WS_()
                self._ip4_()
                self.name_last_node('netmask')
                self._NL_()
                self._define(['name', 'netmask', 'type'], [])
            with self._option():
                self._token('network-object')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._acl_name_slash_()
                        with self._option():
                            self._ip6_()
                        self._error(
                            'expecting one of: '
                            '<acl_name_slash> <ip6>'
                        )
                self.name_last_node('name')
                self._token('/')
                self._int_()
                self.name_last_node('netmask')
                self._NL_()
                self._define(['name', 'netmask', 'type'], [])
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_network_()
                self.name_last_node('group')
                self._NL_()
                self._define(['group', 'type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
            self._error(
                'expecting one of: '
                "'group-object' 'network-object'"
            )

    @tatsumasu()
    def _icmp_group_object_(self):
        with self._choice():
            with self._option():
                self._token('icmp-object')
                self.name_last_node('type')
                self._WS_()
                self._icmp_type_()
                self.name_last_node('name')
                self._NL_()
                self._define(['name', 'type'], [])
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_icmp_()
                self.name_last_node('group')
                self._NL_()
                self._define(['group', 'type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
            self._error(
                'expecting one of: '
                "'group-object' 'icmp-object'"
            )

    @tatsumasu()
    def _protocol_group_object_(self):
        with self._choice():
            with self._option():
                self._token('protocol-object')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()
                self._define(['name', 'type'], [])
            with self._option():
                self._token('group-object')
                self.name_last_node('type')
                self._WS_()
                self._acl_object_group_protocol_()
                self.name_last_node('group')
                self._NL_()
                self._define(['group', 'type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
            self._error(
                'expecting one of: '
                "'group-object' 'protocol-object'"
            )

    @tatsumasu()
    def _port_(self):
        with self._choice():
            with self._option():
                with self._if():
                    with self._group():
                        self._port_code_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._WS_()
                                with self._option():
                                    self._NL_()
                                self._error(
                                    'expecting one of: '
                                    '<NL> <WS>'
                                )
                self._port_code_()
            with self._option():
                self._port_int_()
            self._error(
                'expecting one of: '
                "'aol' 'bgp' 'biff' 'bootpc' 'bootps'"
                "'chargen' 'citrix-ica' 'cmd' 'ctiqbe'"
                "'daytime' 'discard' 'dnsix' 'domain'"
                "'echo' 'exec' 'finger' 'ftp' 'ftp-data'"
                "'gopher' 'h323' 'hostname' 'http'"
                "'https' 'ident' 'imap4' 'irc' 'isakmp'"
                "'kerberos' 'klogin' 'kshell' 'ldap'"
                "'ldaps' 'login' 'lotusnotes' 'lpd'"
                "'mobile-ip' 'nameserver' 'netbios-dgm'"
                "'netbios-ns' 'netbios-ss' 'netbios-ssn'"
                "'nfs' 'nntp' 'non500-isakmp' 'ntp'"
                "'pcanywhere-data' 'pcanywhere-status'"
                "'pim-auto-rp' 'pop2' 'pop3' 'pptp'"
                "'radius' 'radius-acct' 'rip' 'rpc' 'rsh'"
                "'rtsp' 'secureid-udp' 'sip' 'smtp'"
                "'snmp' 'snmptrap' 'sqlnet' 'ssh'"
                "'sunrpc' 'syslog' 'tacacs' 'talk'"
                "'telnet' 'tftp' 'time' 'uucp' 'who'"
                "'whois' 'www' 'xdmcp' <int> <port_code>"
                '<port_int> [0-9]+'
            )

    @tatsumasu()
    def _hour_(self):
        self._pattern('[0-9]{1,2}')

    @tatsumasu()
    def _minute_(self):
        self._pattern('[0-9]{1,2}')

    @tatsumasu()
    def _time_(self):
        self._hour_()
        self.name_last_node('hour')
        self._token(':')
        self._minute_()
        self.name_last_node('minute')
        self._define(['hour', 'minute'], [])

    @tatsumasu()
    def _year_(self):
        self._pattern('[0-9]{4}')

    @tatsumasu()
    def _day_(self):
        self._pattern('[0-9]{1,2}')

    @tatsumasu()
    def _date_(self):
        self._day_()
        self.name_last_node('day')
        self._WS_()
        self._month_()
        self.name_last_node('month')
        self._WS_()
        self._year_()
        self.name_last_node('year')
        self._define(['day', 'month', 'year'], [])

    @tatsumasu()
    def _timedate_(self):
        self._hour_()
        self.name_last_node('hour')
        self._token(':')
        self._minute_()
        self.name_last_node('minute')
        self._define(['hour', 'minute'], [])
        self._WS_()
        self._day_()
        self.name_last_node('day')
        self._WS_()
        self._month_()
        self.name_last_node('month')
        self._WS_()
        self._year_()
        self.name_last_node('year')
        self._define(['day', 'month', 'year'], [])
        self._define(['day', 'hour', 'minute', 'month', 'year'], [])

    @tatsumasu()
    def _time_range_object_(self):
        with self._choice():
            with self._option():
                self._token('periodic')
                self.name_last_node('type')
                self._WS_()

                def block0():
                    self._day_of_the_week_()
                self._positive_closure(block0)
                self.name_last_node('days')
                self._WS_()
                self._time_()
                self.name_last_node('start')
                self._WS_()
                self._token('to')
                self._WS_()
                with self._optional():
                    self._day_of_the_week_()
                    self._WS_()
                self.name_last_node('edays')
                self._time_()
                self.name_last_node('end')
                self._NL_()
                self._define(['days', 'edays', 'end', 'start', 'type'], [])
            with self._option():
                self._token('periodic')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('weekdays')
                        with self._option():
                            self._token('weekend')
                        with self._option():
                            self._token('daily')
                        self._error(
                            'expecting one of: '
                            "'daily' 'weekdays' 'weekend'"
                        )
                self.add_last_node_to_name('days')
                self._WS_()
                self._time_()
                self.name_last_node('start')
                self._WS_()
                self._token('to')
                self._WS_()
                self._time_()
                self.name_last_node('end')
                self._NL_()
                self._define(
                    ['end', 'start', 'type'],
                    ['days'],
                )
            with self._option():
                self._token('absolute')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._token('start')
                    self._WS_()
                    self._timedate_()
                    self.name_last_node('start')
                    self._define(['start'], [])
                with self._optional():
                    self._WS_()
                    self._token('end')
                    self._WS_()
                    self._timedate_()
                    self.name_last_node('end')
                    self._define(['end'], [])
                self._NL_()
                self._define(['end', 'start', 'type'], [])
            with self._option():
                self._token('no')
                self.name_last_node('type')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._define(['type'], [])
            self._error(
                'expecting one of: '
                "'absolute' 'no' 'periodic'"
            )

    @tatsumasu()
    def _time_range_(self):
        self._token('time-range')
        self._WS_()
        self._string_()
        self.name_last_node('name')
        self._NL_()

        def block0():
            self._SP_()
            self._time_range_object_()
        self._closure(block0)
        self.name_last_node('objects')
        self._define(['name', 'objects'], [])

    @tatsumasu()
    def _day_of_the_week_(self):
        with self._choice():
            with self._option():
                self._token('Monday')
            with self._option():
                self._token('Tuesday')
            with self._option():
                self._token('Wednesday')
            with self._option():
                self._token('Thursday')
            with self._option():
                self._token('Friday')
            with self._option():
                self._token('Saturday')
            with self._option():
                self._token('Sunday')
            self._error(
                'expecting one of: '
                "'Friday' 'Monday' 'Saturday' 'Sunday'"
                "'Thursday' 'Tuesday' 'Wednesday'"
            )

    @tatsumasu()
    def _month_(self):
        with self._choice():
            with self._option():
                self._token('January')
            with self._option():
                self._token('February')
            with self._option():
                self._token('March')
            with self._option():
                self._token('April')
            with self._option():
                self._token('May')
            with self._option():
                self._token('June')
            with self._option():
                self._token('July')
            with self._option():
                self._token('August')
            with self._option():
                self._token('September')
            with self._option():
                self._token('October')
            with self._option():
                self._token('November')
            with self._option():
                self._token('December')
            self._error(
                'expecting one of: '
                "'April' 'August' 'December' 'February'"
                "'January' 'July' 'June' 'March' 'May'"
                "'November' 'October' 'September'"
            )

    @tatsumasu()
    def _icmp_type_(self):
        with self._choice():
            with self._option():
                with self._if():
                    with self._group():
                        self._icmp_type_name_()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._WS_()
                                with self._option():
                                    self._NL_()
                                self._error(
                                    'expecting one of: '
                                    '<NL> <WS>'
                                )
                self._icmp_type_name_()
            with self._option():
                self._icmp_type_int_()
            self._error(
                'expecting one of: '
                "'address-mask-reply' 'address-mask-"
                "request' 'administratively-prohibited'"
                "'alternate-address' 'conversion-error'"
                "'destination-unreachable' 'dod-host-"
                "prohibited' 'dod-net-prohibited' 'echo'"
                "'echo-reply' 'echo-request' 'general-"
                "parameter-problem' 'host-isolated'"
                "'host-precedence-unreachable' 'host-"
                "redirect' 'host-tos-redirect' 'host-tos-"
                "unreachable' 'host-unknown' 'host-"
                "unreachable' 'information-reply'"
                "'information-request' 'mask-reply'"
                "'mask-request' 'membership-query'"
                "'membership-reduction' 'membership-"
                "report' 'mobile-redirect' 'neighbor-"
                "advertisement' 'neighbor-redirect'"
                "'neighbor-solicitation' 'net-redirect'"
                "'net-tos-redirect' 'net-tos-unreachable'"
                "'net-unreachable' 'network-unknown' 'no-"
                "room-for-option' 'option-missing'"
                "'packet-too-big' 'parameter-problem'"
                "'port-unreachable' 'precedence-"
                "unreachable' 'protocol-unreachable'"
                "'reassembly-timeout' 'redirect' 'router-"
                "advertisement' 'router-renumbering'"
                "'router-solicitation' 'source-quench'"
                "'source-route-failed' 'time-exceeded'"
                "'timestamp-reply' 'timestamp-request'"
                "'traceroute' 'ttl-exceeded'"
                "'unreachable' <icmp_type_int>"
                '<icmp_type_name> <int> [0-9]+'
            )

    @tatsumasu()
    def _icmp_type_name_(self):
        with self._choice():
            with self._option():
                self._token('unreachable')
            with self._option():
                self._token('ttl-exceeded')
            with self._option():
                self._token('traceroute')
            with self._option():
                self._token('timestamp-request')
            with self._option():
                self._token('timestamp-reply')
            with self._option():
                self._token('time-exceeded')
            with self._option():
                self._token('source-route-failed')
            with self._option():
                self._token('source-quench')
            with self._option():
                self._token('router-solicitation')
            with self._option():
                self._token('router-renumbering')
            with self._option():
                self._token('router-advertisement')
            with self._option():
                self._token('redirect')
            with self._option():
                self._token('reassembly-timeout')
            with self._option():
                self._token('protocol-unreachable')
            with self._option():
                self._token('precedence-unreachable')
            with self._option():
                self._token('port-unreachable')
            with self._option():
                self._token('parameter-problem')
            with self._option():
                self._token('packet-too-big')
            with self._option():
                self._token('option-missing')
            with self._option():
                self._token('no-room-for-option')
            with self._option():
                self._token('network-unknown')
            with self._option():
                self._token('net-unreachable')
            with self._option():
                self._token('net-tos-unreachable')
            with self._option():
                self._token('net-tos-redirect')
            with self._option():
                self._token('net-redirect')
            with self._option():
                self._token('neighbor-solicitation')
            with self._option():
                self._token('neighbor-redirect')
            with self._option():
                self._token('neighbor-advertisement')
            with self._option():
                self._token('mobile-redirect')
            with self._option():
                self._token('membership-report')
            with self._option():
                self._token('membership-reduction')
            with self._option():
                self._token('membership-query')
            with self._option():
                self._token('mask-request')
            with self._option():
                self._token('mask-reply')
            with self._option():
                self._token('information-request')
            with self._option():
                self._token('information-reply')
            with self._option():
                self._token('host-unreachable')
            with self._option():
                self._token('host-unknown')
            with self._option():
                self._token('host-tos-unreachable')
            with self._option():
                self._token('host-tos-redirect')
            with self._option():
                self._token('host-redirect')
            with self._option():
                self._token('host-precedence-unreachable')
            with self._option():
                self._token('host-isolated')
            with self._option():
                self._token('general-parameter-problem')
            with self._option():
                self._token('echo-request')
            with self._option():
                self._token('echo-reply')
            with self._option():
                self._token('echo')
            with self._option():
                self._token('dod-net-prohibited')
            with self._option():
                self._token('dod-host-prohibited')
            with self._option():
                self._token('destination-unreachable')
            with self._option():
                self._token('conversion-error')
            with self._option():
                self._token('alternate-address')
            with self._option():
                self._token('administratively-prohibited')
            with self._option():
                self._token('address-mask-request')
            with self._option():
                self._token('address-mask-reply')
            self._error(
                'expecting one of: '
                "'address-mask-reply' 'address-mask-"
                "request' 'administratively-prohibited'"
                "'alternate-address' 'conversion-error'"
                "'destination-unreachable' 'dod-host-"
                "prohibited' 'dod-net-prohibited' 'echo'"
                "'echo-reply' 'echo-request' 'general-"
                "parameter-problem' 'host-isolated'"
                "'host-precedence-unreachable' 'host-"
                "redirect' 'host-tos-redirect' 'host-tos-"
                "unreachable' 'host-unknown' 'host-"
                "unreachable' 'information-reply'"
                "'information-request' 'mask-reply'"
                "'mask-request' 'membership-query'"
                "'membership-reduction' 'membership-"
                "report' 'mobile-redirect' 'neighbor-"
                "advertisement' 'neighbor-redirect'"
                "'neighbor-solicitation' 'net-redirect'"
                "'net-tos-redirect' 'net-tos-unreachable'"
                "'net-unreachable' 'network-unknown' 'no-"
                "room-for-option' 'option-missing'"
                "'packet-too-big' 'parameter-problem'"
                "'port-unreachable' 'precedence-"
                "unreachable' 'protocol-unreachable'"
                "'reassembly-timeout' 'redirect' 'router-"
                "advertisement' 'router-renumbering'"
                "'router-solicitation' 'source-quench'"
                "'source-route-failed' 'time-exceeded'"
                "'timestamp-reply' 'timestamp-request'"
                "'traceroute' 'ttl-exceeded'"
                "'unreachable'"
            )

    @tatsumasu()
    def _icmp_type_int_(self):
        self._int_()

    @tatsumasu()
    def _icmp_code_int_(self):
        self._int_()

    @tatsumasu()
    def _protocol_code_(self):
        with self._choice():
            with self._option():
                self._token('udp')
            with self._option():
                self._token('tcp')
            with self._option():
                self._token('snp')
            with self._option():
                self._token('pptp')
            with self._option():
                self._token('pim')
            with self._option():
                self._token('pcp')
            with self._option():
                self._token('ospf')
            with self._option():
                self._token('nos')
            with self._option():
                self._token('ipsec')
            with self._option():
                self._token('ipinip')
            with self._option():
                self._token('ip')
            with self._option():
                self._token('ipv6')
            with self._option():
                self._token('igrp')
            with self._option():
                self._token('igmp')
            with self._option():
                self._token('icmp6')
            with self._option():
                self._token('icmpv6')
            with self._option():
                self._token('icmp')
            with self._option():
                self._token('gre')
            with self._option():
                self._token('esp')
            with self._option():
                self._token('eigrp')
            with self._option():
                self._token('ahp')
            with self._option():
                self._token('ah')
            self._error(
                'expecting one of: '
                "'ah' 'ahp' 'eigrp' 'esp' 'gre' 'icmp'"
                "'icmp6' 'icmpv6' 'igmp' 'igrp' 'ip'"
                "'ipinip' 'ipsec' 'ipv6' 'nos' 'ospf'"
                "'pcp' 'pim' 'pptp' 'snp' 'tcp' 'udp'"
            )

    @tatsumasu()
    def _protocol_int_(self):
        self._int_()

    @tatsumasu()
    def _port_code_(self):
        with self._choice():
            with self._option():
                self._token('xdmcp')
            with self._option():
                self._token('www')
            with self._option():
                self._token('whois')
            with self._option():
                self._token('who')
            with self._option():
                self._token('uucp')
            with self._option():
                self._token('time')
            with self._option():
                self._token('tftp')
            with self._option():
                self._token('telnet')
            with self._option():
                self._token('talk')
            with self._option():
                self._token('tacacs')
            with self._option():
                self._token('syslog')
            with self._option():
                self._token('sunrpc')
            with self._option():
                self._token('ssh')
            with self._option():
                self._token('sqlnet')
            with self._option():
                self._token('snmptrap')
            with self._option():
                self._token('snmp')
            with self._option():
                self._token('smtp')
            with self._option():
                self._token('sip')
            with self._option():
                self._token('secureid-udp')
            with self._option():
                self._token('rtsp')
            with self._option():
                self._token('rsh')
            with self._option():
                self._token('rpc')
            with self._option():
                self._token('rip')
            with self._option():
                self._token('radius-acct')
            with self._option():
                self._token('radius')
            with self._option():
                self._token('pptp')
            with self._option():
                self._token('pop3')
            with self._option():
                self._token('pop2')
            with self._option():
                self._token('pim-auto-rp')
            with self._option():
                self._token('pcanywhere-status')
            with self._option():
                self._token('pcanywhere-data')
            with self._option():
                self._token('ntp')
            with self._option():
                self._token('non500-isakmp')
            with self._option():
                self._token('nntp')
            with self._option():
                self._token('nfs')
            with self._option():
                self._token('netbios-ssn')
            with self._option():
                self._token('netbios-ss')
            with self._option():
                self._token('netbios-ns')
            with self._option():
                self._token('netbios-dgm')
            with self._option():
                self._token('nameserver')
            with self._option():
                self._token('mobile-ip')
            with self._option():
                self._token('lpd')
            with self._option():
                self._token('lotusnotes')
            with self._option():
                self._token('login')
            with self._option():
                self._token('ldaps')
            with self._option():
                self._token('ldap')
            with self._option():
                self._token('kshell')
            with self._option():
                self._token('klogin')
            with self._option():
                self._token('kerberos')
            with self._option():
                self._token('isakmp')
            with self._option():
                self._token('irc')
            with self._option():
                self._token('imap4')
            with self._option():
                self._token('ident')
            with self._option():
                self._token('https')
            with self._option():
                self._token('http')
            with self._option():
                self._token('hostname')
            with self._option():
                self._token('h323')
            with self._option():
                self._token('gopher')
            with self._option():
                self._token('ftp-data')
            with self._option():
                self._token('ftp')
            with self._option():
                self._token('finger')
            with self._option():
                self._token('exec')
            with self._option():
                self._token('echo')
            with self._option():
                self._token('domain')
            with self._option():
                self._token('dnsix')
            with self._option():
                self._token('discard')
            with self._option():
                self._token('daytime')
            with self._option():
                self._token('ctiqbe')
            with self._option():
                self._token('cmd')
            with self._option():
                self._token('citrix-ica')
            with self._option():
                self._token('chargen')
            with self._option():
                self._token('bootps')
            with self._option():
                self._token('bootpc')
            with self._option():
                self._token('biff')
            with self._option():
                self._token('bgp')
            with self._option():
                self._token('aol')
            self._error(
                'expecting one of: '
                "'aol' 'bgp' 'biff' 'bootpc' 'bootps'"
                "'chargen' 'citrix-ica' 'cmd' 'ctiqbe'"
                "'daytime' 'discard' 'dnsix' 'domain'"
                "'echo' 'exec' 'finger' 'ftp' 'ftp-data'"
                "'gopher' 'h323' 'hostname' 'http'"
                "'https' 'ident' 'imap4' 'irc' 'isakmp'"
                "'kerberos' 'klogin' 'kshell' 'ldap'"
                "'ldaps' 'login' 'lotusnotes' 'lpd'"
                "'mobile-ip' 'nameserver' 'netbios-dgm'"
                "'netbios-ns' 'netbios-ss' 'netbios-ssn'"
                "'nfs' 'nntp' 'non500-isakmp' 'ntp'"
                "'pcanywhere-data' 'pcanywhere-status'"
                "'pim-auto-rp' 'pop2' 'pop3' 'pptp'"
                "'radius' 'radius-acct' 'rip' 'rpc' 'rsh'"
                "'rtsp' 'secureid-udp' 'sip' 'smtp'"
                "'snmp' 'snmptrap' 'sqlnet' 'ssh'"
                "'sunrpc' 'syslog' 'tacacs' 'talk'"
                "'telnet' 'tftp' 'time' 'uucp' 'who'"
                "'whois' 'www' 'xdmcp'"
            )

    @tatsumasu()
    def _port_int_(self):
        self._int_()

    @tatsumasu()
    def _grammar_(self):

        def block0():
            self._command_()
            self._cut()
        self._positive_closure(block0)
        self.name_last_node('@')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('line')
                with self._option():
                    self._token('end')
                with self._option():
                    self._check_eof()
                self._error(
                    'expecting one of: '
                    "'end' 'line'"
                )

    @tatsumasu()
    def _version_(self):
        self._token('version')
        self._TOEOL_()
        self.name_last_node('version')
        self._NL_()
        self._define(['version'], [])

    @tatsumasu()
    def _command_(self):
        with self._choice():
            with self._option():
                self._version_()
            with self._option():
                self._hostname_()
            with self._option():
                self._domain_name_()
            with self._option():
                self._interface_()
            with self._option():
                self._access_list_()
            with self._option():
                self._ip_()
            with self._option():
                self._ipv6_()
            with self._option():
                self._ignored_()
            self._error(
                'expecting one of: '
                "'!' ':' 'Current configuration' 'Using'"
                "'\\n' '\\r' 'aaa' 'access-list' 'alias'"
                "'appfw' 'archive' 'arp' 'banner' 'boot'"
                "'boot-end-marker' 'boot-start-marker'"
                "'bridge' 'call-home' 'class-map' 'clock'"
                "'control-plane' 'crypto' 'cts' 'define'"
                "'diagnostic' 'dial-peer' 'dialer-list'"
                "'domain-name' 'dot11' 'enable'"
                "'encryption' 'errdisable' 'file'"
                "'firewall' 'hostname' 'hw-module'"
                "'interface' 'ip' 'ipv6' 'isdn' 'key'"
                "'license' 'lldp' 'logging' 'login' 'mac-"
                "address' 'mac-address-table' 'memory'"
                "'mls' 'mmi' 'multilink' 'no' 'platform'"
                "'policy-map' 'port-channel' 'power'"
                "'redundancy' 'resource' 'rmon' 'route-"
                "map' 'router' 'rtr' 'security' 'service'"
                "'snmp' 'snmp-server' 'spanning-tree'"
                "'switch' 'system' 'transceiver'"
                "'username' 'version' 'vlan' 'vpdn' 'vrf'"
                "'vtp' 'wism' <NL> <access_list>"
                '<access_list_ip_extended>'
                '<access_list_ip_standard>'
                '<access_list_remark> <domain_name>'
                '<ignored>'
            )

    @tatsumasu()
    def _interface_detail_(self):
        with self._choice():
            with self._option():
                self._token('description')
                self.name_last_node('type')
                self._WS_()
                self._TOEOL_()
                self.name_last_node('value')
                self._NL_()
                self._define(['type', 'value'], [])
            with self._option():
                with self._group():
                    self._token('ip')
                    self._WS_()
                    self._token('address')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    self._ip4_()
                    self._WS_()
                    self._ip4_()
                    with self._optional():
                        self._WS_()
                        self._token('secondary')
                self.name_last_node('value')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['type', 'value'], [])
            with self._option():
                with self._group():
                    self._token('ip')
                    self._WS_()
                    self._token('access-group')
                self.name_last_node('type')
                self._WS_()
                with self._group():
                    self._obj_name_()
                    self._WS_()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('in')
                            with self._option():
                                self._token('out')
                            self._error(
                                'expecting one of: '
                                "'in' 'out'"
                            )
                self.name_last_node('value')
                with self._optional():
                    self._WS_()
                self._NL_()
                self._define(['type', 'value'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
                self._TOEOL_()
                self._NL_()
                self._define(['type'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('type')
                self._void()
                self._define(['type'], [])
            self._error(
                'expecting one of: '
                "'\\n' '\\r' 'description' 'ip' <NL>"
                '<TOEOL> [^\\n]*'
            )

    @tatsumasu()
    def _banner_(self):
        self._token('banner')
        self._WS_()
        self._banner_cmd_()

    @tatsumasu()
    def _banner_cmd_(self):
        self._token('motd')
        self._WS_()
        self._delim_start_()
        self._delim_msg_()
        self._delim_stop_()
        self._NL_()

    @tatsumasu()
    def _delim_start_(self):
        with self._choice():
            with self._option():
                self._token('^C')
            with self._option():
                self._pattern('.')
            self._error(
                'expecting one of: '
                "'^C' ."
            )

    @tatsumasu()
    def _delim_msg_(self):
        self._void()

    @tatsumasu()
    def _delim_stop_(self):
        self._void()

    @tatsumasu()
    def _ipv6_(self):
        self._token('ipv6')
        self._WS_()
        self._ipv6_command_()
        self.name_last_node('cmd')
        self._define(['cmd'], [])

    @tatsumasu()
    def _ipv6_command_(self):
        with self._choice():
            with self._option():
                self._constant('access-list')
                self.name_last_node('cmd')
                self._ipv6_access_list_()
                self.name_last_node('object')
                self._define(['cmd', 'object'], [])
            with self._option():
                self._constant('ignored')
                self.name_last_node('cmd')
                self._ipv6_ignored_()
                self.name_last_node('object')
                self._define(['cmd', 'object'], [])
            self._error(
                'expecting one of: '
                "'access-list' 'ipv6' 'prefix-list'"
                "'route' 'unicast-routing'"
                '<ipv6_access_list> <ipv6_ignored>'
            )

    @tatsumasu()
    def _ipv6_ignored_(self):
        with self._choice():
            with self._option():
                self._token('unicast-routing')
                self._TOEOL_()
            with self._option():
                self._token('route')
                self._WS_()
                self._TOEOL_()
            with self._option():
                self._token('prefix-list')
                self._WS_()
                self._TOEOL_()
            with self._option():
                self._token('ipv6')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            self._error(
                'expecting one of: '
                "'ipv6' 'prefix-list' 'route' 'unicast-"
                "routing'"
            )

    @tatsumasu()
    def _ipv6_access_list_(self):
        self._token('access-list')
        self._WS_()
        self._obj_name_()
        self.name_last_node('name')
        self._NL_()

        def block0():
            self._ipv6_access_list_seq_()
        self._positive_closure(block0)
        self.name_last_node('objects')
        self._define(['name', 'objects'], [])

    @tatsumasu()
    def _ipv6_access_list_seq_(self):
        self._SP_()
        self._token('sequence')
        self._WS_()
        self._int_()
        self.name_last_node('seq')
        self._WS_()
        self._ipv6_access_list_rule_()
        self.name_last_node('rule')
        self._define(['rule', 'seq'], [])

    @tatsumasu()
    def _ipv6_access_list_rule_(self):
        with self._choice():
            with self._option():
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_protocol_()
                self.name_last_node('protocol')
                self._WS_()
                self._ios_ipv6_node_()
                self.name_last_node('src')
                self._WS_()
                self._ios_ipv6_node_()
                self.name_last_node('dst')
                self._ipv6_access_list_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'mode', 'options', 'protocol', 'src'], [])
            with self._option():
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                self._WS_()
                self._ios_ipv6_node_()
                self.name_last_node('src')
                self._WS_()
                self._ios_ipv6_node_()
                self.name_last_node('dst')
                self._ipv6_access_list_rule_icmp_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'mode', 'options', 'protocol', 'src'], [])
            self._error(
                'expecting one of: '
                "'deny' 'permit' <acl_mode>"
            )

    @tatsumasu()
    def _ipv6_access_list_rule_option_(self):
        with self._choice():
            with self._option():
                self._token('dest-option-type')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('dscp')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('flow-label')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('fragments')
                self.name_last_node('type')
            with self._option():
                self._token('log')
                self.name_last_node('type')
            with self._option():
                self._token('log-input')
                self.name_last_node('type')
            with self._option():
                self._token('mobility')
                self.name_last_node('type')
            with self._option():
                self._token('mobility-type')
                self.name_last_node('type')
                self._int_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('routing')
                self.name_last_node('type')
            with self._option():
                self._token('routing-type')
                self.name_last_node('type')
                with self._optional():
                    self._int_()
                    self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('time-range')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            self._error(
                'expecting one of: '
                "'dest-option-type' 'dscp' 'flow-label'"
                "'fragments' 'log' 'log-input' 'mobility'"
                "'mobility-type' 'routing' 'routing-type'"
                "'time-range'"
            )

    @tatsumasu()
    def _ipv6_access_list_rule_options_(self):

        def block0():
            self._WS_()
            self._ipv6_access_list_rule_option_()
        self._closure(block0)

    @tatsumasu()
    def _ipv6_access_list_icmp_rule_option_(self):
        with self._choice():
            with self._option():
                self._token('nd-ns')
                self.name_last_node('type')
            with self._option():
                self._token('nd-na')
                self.name_last_node('type')
            with self._option():
                self._token('router-solicitation')
                self.name_last_node('type')
            with self._option():
                self._token('router-advertisement')
                self.name_last_node('type')
            with self._option():
                self._token('redirect')
                self.name_last_node('type')
            with self._option():
                self._icmp_type_name_()
                self.name_last_node('type')
            self._error(
                'expecting one of: '
                "'address-mask-reply' 'address-mask-"
                "request' 'administratively-prohibited'"
                "'alternate-address' 'conversion-error'"
                "'destination-unreachable' 'dod-host-"
                "prohibited' 'dod-net-prohibited' 'echo'"
                "'echo-reply' 'echo-request' 'general-"
                "parameter-problem' 'host-isolated'"
                "'host-precedence-unreachable' 'host-"
                "redirect' 'host-tos-redirect' 'host-tos-"
                "unreachable' 'host-unknown' 'host-"
                "unreachable' 'information-reply'"
                "'information-request' 'mask-reply'"
                "'mask-request' 'membership-query'"
                "'membership-reduction' 'membership-"
                "report' 'mobile-redirect' 'nd-na' 'nd-"
                "ns' 'neighbor-advertisement' 'neighbor-"
                "redirect' 'neighbor-solicitation' 'net-"
                "redirect' 'net-tos-redirect' 'net-tos-"
                "unreachable' 'net-unreachable' 'network-"
                "unknown' 'no-room-for-option' 'option-"
                "missing' 'packet-too-big' 'parameter-"
                "problem' 'port-unreachable' 'precedence-"
                "unreachable' 'protocol-unreachable'"
                "'reassembly-timeout' 'redirect' 'router-"
                "advertisement' 'router-renumbering'"
                "'router-solicitation' 'source-quench'"
                "'source-route-failed' 'time-exceeded'"
                "'timestamp-reply' 'timestamp-request'"
                "'traceroute' 'ttl-exceeded'"
                "'unreachable' <icmp_type_name>"
            )

    @tatsumasu()
    def _ipv6_access_list_rule_icmp_options_(self):

        def block0():
            self._WS_()
            self._ipv6_access_list_icmp_rule_option_()
        self._closure(block0)

    @tatsumasu()
    def _ip_(self):
        self._token('ip')
        self._WS_()
        self._ip_command_()
        self.name_last_node('cmd')
        self._define(['cmd'], [])

    @tatsumasu()
    def _ip_command_(self):
        with self._choice():
            with self._option():
                self._token('access-list')
                self.name_last_node('cmd')
                self._WS_()
                self._ip_access_list_()
                self.name_last_node('object')
                self._define(['cmd', 'object'], [])
            with self._option():
                self._token('domain name')
                self.name_last_node('cmd')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._define(['cmd', 'name'], [])
            with self._option():
                self._token('route')
                self.name_last_node('cmd')
                self._WS_()
                self._ip_route_()
                self.name_last_node('route')
                self._define(['cmd', 'route'], [])
            with self._option():
                self._constant('None')
                self.name_last_node('cmd')
                self._ip_ignored_()
                self._define(['cmd'], [])
            self._error(
                'expecting one of: '
                "'access-list' 'accounting-threshold'"
                "'as-path' 'cef' 'classless' 'default-"
                "gateway' 'dhcp excluded-address' 'dhcp"
                "pool' 'domain name' 'domain' 'flow-"
                "aggregation' 'flow-cache' 'flow-export'"
                "'flow-top-talkers' 'forward-protocol'"
                "'ftp' 'host' 'http' 'inspect' 'ips'"
                "'multicast-routing' 'name-server' 'nat'"
                "'pim' 'prefix-list' 'route' 'routing'"
                "'scp' 'sla' 'slb' 'ssh' 'subnet-zero'"
                "'tcp' 'tftp' 'vrf' <ip_ignored>"
            )

    @tatsumasu()
    def _ip_route_(self):
        with self._choice():
            with self._option():
                self._constant('None')
                self.name_last_node('prefix')
                self._token('profile')
                self._NL_()
                self._define(['prefix'], [])
            with self._option():
                self._ip4_()
                self.name_last_node('prefix')
                self._WS_()
                self._ip4_()
                self.name_last_node('mask')
                self._WS_()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._acl_interface_id_()
                        self._error(
                            'expecting one of: '
                            '<acl_interface_id> <ip4>'
                        )
                self.name_last_node('gw')
                self._NL_()
                self._define(['gw', 'mask', 'prefix'], [])
            self._error(
                'expecting one of: '
                "'profile' (?:(?:25[0-5]|(?:2[0-"
                '4]|1{0,1}[0-9]){0,1}[0-'
                '9])\\.){3,3}(?:25[0-5]|(?:2[0-'
                '4]|1{0,1}[0-9]){0,1}[0-9]) <ip4>'
            )

    @tatsumasu()
    def _ip_access_list_(self):
        with self._choice():
            with self._option():
                self._token('standard')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()

                def block0():
                    self._ip_access_list_standard_()
                self._positive_closure(block0)
                self.name_last_node('objects')
                self._define(['name', 'objects', 'type'], [])
            with self._option():
                self._token('extended')
                self.name_last_node('type')
                self._WS_()
                self._obj_name_()
                self.name_last_node('name')
                self._NL_()

                def block1():
                    self._ip_access_list_extended_()
                self._positive_closure(block1)
                self.name_last_node('objects')
                self._define(['name', 'objects', 'type'], [])
            self._error(
                'expecting one of: '
                "'extended' 'standard'"
            )

    @tatsumasu()
    def _ip_access_list_standard_rule_option_(self):
        self._token('log')
        self.name_last_node('type')
        with self._optional():
            self._WS_()
            self._identifier_()
            self.name_last_node('value')
            self._define(['value'], [])
        self._define(['type', 'value'], [])

    @tatsumasu()
    def _ip_access_list_standard_rule_options_(self):

        def block0():
            self._WS_()
            self._ip_access_list_standard_rule_option_()
        self._closure(block0)

    @tatsumasu()
    def _ip_access_list_remark_(self):
        with self._optional():
            self._int_()
            self.name_last_node('seq')
            self._WS_()
            self._define(['seq'], [])
        self._token('remark')
        self._SP_()
        self._remark_()
        self.name_last_node('remark')
        self._NL_()
        self._define(['remark', 'seq'], [])

    @tatsumasu()
    def _ip_access_list_standard_rule_(self):
        with self._optional():
            self._int_()
            self.name_last_node('seq')
            self._WS_()
            self._define(['seq'], [])
        self._acl_mode_()
        self.name_last_node('mode')
        self._WS_()
        self._ios_host_()
        self.name_last_node('src')
        self._ip_access_list_standard_rule_options_()
        self.name_last_node('options')
        self._NL_()
        self._define(['mode', 'options', 'seq', 'src'], [])

    @tatsumasu()
    def _ios_host_(self):
        with self._choice():
            with self._option():
                self._ip4_()
                self.name_last_node('address')
                with self._optional():
                    self._WS_()
                    self._ip4_()
                    self.name_last_node('wildcard')
                    self._define(['wildcard'], [])
                self._define(['address', 'wildcard'], [])
            with self._option():
                self._token('host')
                self._WS_()
                self._ip4_()
                self.name_last_node('address')
                self._define(['address'], [])
            with self._option():
                self._token('any')
                self.name_last_node('address')
            self._error(
                'expecting one of: '
                "'any' 'host' (?:(?:25[0-5]|(?:2[0-"
                '4]|1{0,1}[0-9]){0,1}[0-'
                '9])\\.){3,3}(?:25[0-5]|(?:2[0-'
                '4]|1{0,1}[0-9]){0,1}[0-9]) <ip4>'
            )

    @tatsumasu()
    def _ios_node_(self):
        self._ios_host_()
        self.name_last_node('host')
        with self._optional():
            self._WS_()
            self._acl_port_()
            self.name_last_node('port')
            self._define(['port'], [])
        self._define(['host', 'port'], [])

    @tatsumasu()
    def _ios_ipv6_host_(self):
        with self._choice():
            with self._option():
                self._ip6_()
                self.name_last_node('address')
                self._token('/')
                self._int_()
                self.name_last_node('prefix')
                self._define(['address', 'prefix'], [])
            with self._option():
                self._token('host')
                self._WS_()
                self._ip6_()
                self.name_last_node('address')
                self._define(['address'], [])
            with self._option():
                self._token('any')
                self.name_last_node('address')
            self._error(
                'expecting one of: '
                "'any' 'host' <ip6>"
                '[a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+'
            )

    @tatsumasu()
    def _ios_ipv6_node_(self):
        self._ios_ipv6_host_()
        self.name_last_node('host')
        with self._optional():
            self._WS_()
            self._acl_port_()
            self.name_last_node('port')
            self._define(['port'], [])
        self._define(['host', 'port'], [])

    @tatsumasu()
    def _ip_access_list_standard_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._SP_()
                    self._ip_access_list_remark_()
                self._positive_closure(block0)
                self.name_last_node('remark')
                self._SP_()
                with self._optional():
                    self._int_()
                    self.name_last_node('seq')
                    self._WS_()
                    self._define(['seq'], [])
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._ios_host_()
                self.name_last_node('src')
                self._ip_access_list_standard_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['mode', 'options', 'seq', 'src'], [])
                self._define(['mode', 'options', 'remark', 'seq', 'src'], [])
            with self._option():
                self._SP_()
                with self._optional():
                    self._int_()
                    self.name_last_node('seq')
                    self._WS_()
                    self._define(['seq'], [])
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._ios_host_()
                self.name_last_node('src')
                self._ip_access_list_standard_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['mode', 'options', 'seq', 'src'], [])
                self._define(['mode', 'options', 'seq', 'src'], [])
            self._error(
                'expecting one of: '
                "' ' <SP>"
            )

    @tatsumasu()
    def _ip_access_list_extended_rule_option_(self):
        with self._choice():
            with self._option():
                self._token('precedence')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('dscp')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('tos')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('time-range')
                self.name_last_node('type')
                self._WS_()
                self._identifier_()
                self.name_last_node('value')
                self._define(['type', 'value'], [])
            with self._option():
                self._token('fragments')
                self.name_last_node('type')
            with self._option():
                self._token('log-input')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._identifier_()
                    self.name_last_node('value')
                    self._define(['value'], [])
                self._define(['type', 'value'], [])
            with self._option():
                self._token('log')
                self.name_last_node('type')
                with self._optional():
                    self._WS_()
                    self._identifier_()
                    self.name_last_node('value')
                    self._define(['value'], [])
                self._define(['type', 'value'], [])
            with self._option():
                self._token('established')
                self.name_last_node('type')
            self._error(
                'expecting one of: '
                "'dscp' 'established' 'fragments' 'log'"
                "'log-input' 'precedence' 'time-range'"
                "'tos'"
            )

    @tatsumasu()
    def _ip_access_list_extended_rule_options_(self):

        def block0():
            self._WS_()
            self._ip_access_list_extended_rule_option_()
        self._closure(block0)

    @tatsumasu()
    def _ip_access_list_extended_rule_(self):
        with self._choice():
            with self._option():
                with self._optional():
                    self._int_()
                    self.name_last_node('seq')
                    self._WS_()
                    self._define(['seq'], [])
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                self._WS_()
                self._ios_host_()
                self.name_last_node('src')
                self._WS_()
                self._ios_host_()
                self.name_last_node('dst')
                self._acl_icmp_options_()
                self.name_last_node('icmp')
                self._ip_access_list_extended_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'icmp', 'mode', 'options', 'protocol', 'seq', 'src'], [])
            with self._option():
                with self._optional():
                    self._int_()
                    self.name_last_node('seq')
                    self._WS_()
                    self._define(['seq'], [])
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_protocol_()
                self.name_last_node('protocol')
                self._WS_()
                self._ios_node_()
                self.name_last_node('src')
                self._WS_()
                self._ios_node_()
                self.name_last_node('dst')
                self._ip_access_list_extended_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'mode', 'options', 'protocol', 'seq', 'src'], [])
            with self._option():
                with self._optional():
                    self._int_()
                    self.name_last_node('seq')
                    self._WS_()
                    self._define(['seq'], [])
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_protocol_()
                self.name_last_node('protocol')
                self._WS_()
                self._ios_host_()
                self.name_last_node('src')
                self._WS_()
                self._ios_host_()
                self.name_last_node('dst')
                self._ip_access_list_extended_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'mode', 'options', 'protocol', 'seq', 'src'], [])
            self._error(
                'expecting one of: '
                '<acl_mode> <int>'
            )

    @tatsumasu()
    def _ip_access_list_extended_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._SP_()
                    self._ip_access_list_remark_()
                self._positive_closure(block0)
                self.name_last_node('remark')
                self._SP_()
                with self._choice():
                    with self._option():
                        with self._optional():
                            self._int_()
                            self.name_last_node('seq')
                            self._WS_()
                            self._define(['seq'], [])
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._protocol_icmp_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('src')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('dst')
                        self._acl_icmp_options_()
                        self.name_last_node('icmp')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'icmp', 'mode', 'options', 'protocol', 'seq', 'src'], [])
                    with self._option():
                        with self._optional():
                            self._int_()
                            self.name_last_node('seq')
                            self._WS_()
                            self._define(['seq'], [])
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._ios_node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._ios_node_()
                        self.name_last_node('dst')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'mode', 'options', 'protocol', 'seq', 'src'], [])
                    with self._option():
                        with self._optional():
                            self._int_()
                            self.name_last_node('seq')
                            self._WS_()
                            self._define(['seq'], [])
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('src')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('dst')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'mode', 'options', 'protocol', 'seq', 'src'], [])
                    self._error(
                        'expecting one of: '
                        '<acl_mode> <int>'
                    )
                self._define(['dst', 'icmp', 'mode', 'options', 'protocol', 'remark', 'seq', 'src'], [])
            with self._option():
                self._SP_()
                with self._choice():
                    with self._option():
                        with self._optional():
                            self._int_()
                            self.name_last_node('seq')
                            self._WS_()
                            self._define(['seq'], [])
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._protocol_icmp_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('src')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('dst')
                        self._acl_icmp_options_()
                        self.name_last_node('icmp')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'icmp', 'mode', 'options', 'protocol', 'seq', 'src'], [])
                    with self._option():
                        with self._optional():
                            self._int_()
                            self.name_last_node('seq')
                            self._WS_()
                            self._define(['seq'], [])
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._ios_node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._ios_node_()
                        self.name_last_node('dst')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'mode', 'options', 'protocol', 'seq', 'src'], [])
                    with self._option():
                        with self._optional():
                            self._int_()
                            self.name_last_node('seq')
                            self._WS_()
                            self._define(['seq'], [])
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('src')
                        self._WS_()
                        self._ios_host_()
                        self.name_last_node('dst')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'mode', 'options', 'protocol', 'seq', 'src'], [])
                    self._error(
                        'expecting one of: '
                        '<acl_mode> <int>'
                    )
                self._define(['dst', 'icmp', 'mode', 'options', 'protocol', 'seq', 'src'], [])
            self._error(
                'expecting one of: '
                "' ' <SP>"
            )

    @tatsumasu()
    def _host_wildcard_(self):
        self._ip4_()
        self.name_last_node('host')
        with self._optional():
            self._WS_()
            self._ip4_()
            self.name_last_node('wildcard')
            self._define(['wildcard'], [])
        self._define(['host', 'wildcard'], [])

    @tatsumasu()
    def _access_list_ip_standard_rule_(self):
        self._token('access-list')
        self._WS_()
        self._access_list_ip_standard_id_()
        self.name_last_node('id')
        self._WS_()
        self._acl_mode_()
        self.name_last_node('mode')
        self._WS_()
        self._ios_host_()
        self.name_last_node('src')
        self._ip_access_list_standard_rule_options_()
        self.name_last_node('options')
        self._NL_()
        self._define(['id', 'mode', 'options', 'src'], [])

    @tatsumasu()
    def _access_list_ip_standard_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._access_list_remark_()
                self._positive_closure(block0)
                self.name_last_node('remark')
                self._token('access-list')
                self._WS_()
                self._access_list_ip_standard_id_()
                self.name_last_node('id')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._ios_host_()
                self.name_last_node('src')
                self._ip_access_list_standard_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['id', 'mode', 'options', 'src'], [])
                self._define(['id', 'mode', 'options', 'remark', 'src'], [])
            with self._option():
                self._token('access-list')
                self._WS_()
                self._access_list_ip_standard_id_()
                self.name_last_node('id')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._ios_host_()
                self.name_last_node('src')
                self._ip_access_list_standard_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['id', 'mode', 'options', 'src'], [])
            self._error(
                'expecting one of: '
                "'access-list' <access_list_remark>"
            )

    @tatsumasu()
    def _access_list_remark_(self):
        self._token('access-list')
        self._WS_()
        self._acl_id_()
        self._WS_()
        self._token('remark')
        self._WS_()
        self._remark_()
        self.name_last_node('remark')
        self._NL_()
        self._define(['remark'], [])

    @tatsumasu()
    def _access_list_(self):
        with self._choice():
            with self._option():
                self._access_list_ip_extended_()
            with self._option():
                self._access_list_ip_standard_()
            self._error(
                'expecting one of: '
                "'access-list' <access_list_ip_extended>"
                '<access_list_ip_standard>'
                '<access_list_remark>'
            )

    @tatsumasu()
    def _access_list_ip_extended_rule_(self):
        with self._choice():
            with self._option():
                self._token('access-list')
                self._WS_()
                self._access_list_ip_extended_id_()
                self.name_last_node('id')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._protocol_icmp_()
                self.name_last_node('protocol')
                self._WS_()
                self._acl_icmp_node_()
                self.name_last_node('src')
                self._WS_()
                self._acl_icmp_node_()
                self.name_last_node('dst')
                self._acl_icmp_options_()
                self.name_last_node('icmp')
                self._ip_access_list_extended_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'icmp', 'id', 'mode', 'options', 'protocol', 'src'], [])
            with self._option():
                self._token('access-list')
                self._WS_()
                self._access_list_ip_extended_id_()
                self.name_last_node('id')
                self._WS_()
                self._acl_mode_()
                self.name_last_node('mode')
                self._WS_()
                self._acl_protocol_()
                self.name_last_node('protocol')
                self._WS_()
                self._node_()
                self.name_last_node('src')
                self._WS_()
                self._node_()
                self.name_last_node('dst')
                self._ip_access_list_extended_rule_options_()
                self.name_last_node('options')
                self._NL_()
                self._define(['dst', 'id', 'mode', 'options', 'protocol', 'src'], [])
            self._error(
                'expecting one of: '
                "'access-list'"
            )

    @tatsumasu()
    def _access_list_ip_extended_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._access_list_remark_()
                self._positive_closure(block0)
                self.name_last_node('remark')
                with self._choice():
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._access_list_ip_extended_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._protocol_icmp_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('dst')
                        self._acl_icmp_options_()
                        self.name_last_node('icmp')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'icmp', 'id', 'mode', 'options', 'protocol', 'src'], [])
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._access_list_ip_extended_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._node_()
                        self.name_last_node('dst')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'id', 'mode', 'options', 'protocol', 'src'], [])
                    self._error(
                        'expecting one of: '
                        "'access-list'"
                    )
                self._define(['dst', 'icmp', 'id', 'mode', 'options', 'protocol', 'remark', 'src'], [])
            with self._option():
                with self._choice():
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._access_list_ip_extended_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._protocol_icmp_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._acl_icmp_node_()
                        self.name_last_node('dst')
                        self._acl_icmp_options_()
                        self.name_last_node('icmp')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'icmp', 'id', 'mode', 'options', 'protocol', 'src'], [])
                    with self._option():
                        self._token('access-list')
                        self._WS_()
                        self._access_list_ip_extended_id_()
                        self.name_last_node('id')
                        self._WS_()
                        self._acl_mode_()
                        self.name_last_node('mode')
                        self._WS_()
                        self._acl_protocol_()
                        self.name_last_node('protocol')
                        self._WS_()
                        self._node_()
                        self.name_last_node('src')
                        self._WS_()
                        self._node_()
                        self.name_last_node('dst')
                        self._ip_access_list_extended_rule_options_()
                        self.name_last_node('options')
                        self._NL_()
                        self._define(['dst', 'id', 'mode', 'options', 'protocol', 'src'], [])
                    self._error(
                        'expecting one of: '
                        "'access-list'"
                    )
            self._error(
                'expecting one of: '
                "'access-list' <access_list_remark>"
            )

    @tatsumasu()
    def _access_list_ip_standard_id_(self):
        with self._choice():
            with self._option():
                self._pattern('[1-9][0-9]?')
                with self._if():
                    self._WS_()
            with self._option():
                self._pattern('13[0-9][0-9]')
                with self._if():
                    self._WS_()
            self._error(
                'expecting one of: '
                '13[0-9][0-9] [1-9][0-9]?'
            )

    @tatsumasu()
    def _access_list_ip_extended_id_(self):
        with self._choice():
            with self._option():
                self._pattern('1[0-9][0-9]')
                with self._if():
                    self._WS_()
            with self._option():
                self._pattern('2[0-6][0-9][0-9]')
                with self._if():
                    self._WS_()
            self._error(
                'expecting one of: '
                '1[0-9][0-9] 2[0-6][0-9][0-9]'
            )

    @tatsumasu()
    def _ignored_indent_(self):

        def block0():
            self._pattern('^ [^\\n]*')
            self._NL_()
        self._closure(block0)

    @tatsumasu()
    def _ignored_(self):
        with self._choice():
            with self._option():
                self._token('!')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token(':')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('aaa')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('alias')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('appfw')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('archive')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('arp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._banner_()
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('boot-start-marker')
                        with self._option():
                            self._token('boot-end-marker')
                        self._error(
                            'expecting one of: '
                            "'boot-end-marker' 'boot-start-marker'"
                        )
                self._NL_()
            with self._option():
                self._token('boot')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('bridge')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('call-home')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('class-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('clock')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('control-plane')
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('crypto')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('cts')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('Current configuration')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('define')
                self._WS_()
                self._token('interface-range')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('diagnostic')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dialer-list')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dial-peer')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dot11')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('enable')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('encryption')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('errdisable')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('file')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('firewall')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('hw-module')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('isdn')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('key')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('license')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('lldp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('logging')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('login')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mac-address-table')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mac-address')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('memory')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mls')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('mmi')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('multilink')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('no')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('platform')
                self._WS_()
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('policy-map')
                self._WS_()
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('port-channel')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('power')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('redundancy')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('resource')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('rmon')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('route-map')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('router')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('rtr')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('security')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('switch')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('service')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('snmp-server')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('snmp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('spanning-tree')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('system')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('transceiver')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('username')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('Using')
                self._int_()
                self._token('out of')
                self._int_()
                self._token('bytes')
                self._NL_()
            with self._option():
                self._token('vlan')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('vpdn')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('vrf')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('vtp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('wism')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._NL_()
            self._error(
                'expecting one of: '
                "'!' ':' 'Current configuration' 'Using'"
                "'\\n' '\\r' 'aaa' 'alias' 'appfw'"
                "'archive' 'arp' 'banner' 'boot' 'boot-"
                "end-marker' 'boot-start-marker' 'bridge'"
                "'call-home' 'class-map' 'clock'"
                "'control-plane' 'crypto' 'cts' 'define'"
                "'diagnostic' 'dial-peer' 'dialer-list'"
                "'dot11' 'enable' 'encryption'"
                "'errdisable' 'file' 'firewall' 'hw-"
                "module' 'isdn' 'key' 'license' 'lldp'"
                "'logging' 'login' 'mac-address' 'mac-"
                "address-table' 'memory' 'mls' 'mmi'"
                "'multilink' 'no' 'platform' 'policy-map'"
                "'port-channel' 'power' 'redundancy'"
                "'resource' 'rmon' 'route-map' 'router'"
                "'rtr' 'security' 'service' 'snmp' 'snmp-"
                "server' 'spanning-tree' 'switch'"
                "'system' 'transceiver' 'username' 'vlan'"
                "'vpdn' 'vrf' 'vtp' 'wism' <NL>"
            )

    @tatsumasu()
    def _ip_ignored_(self):
        with self._choice():
            with self._option():
                self._token('cef')
                self._NL_()
            with self._option():
                self._token('as-path')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('inspect')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('domain')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('name-server')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('route')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('http')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('nat')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('subnet-zero')
                self._NL_()
            with self._option():
                self._token('dhcp excluded-address')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('dhcp pool')

                def block0():
                    self._pattern('[^(!|\\n)]*')
                    self._NL_()
                self._closure(block0)
            with self._option():
                self._token('tcp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('scp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ssh')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('classless')
                self._NL_()
            with self._option():
                self._token('forward-protocol')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ips')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('flow-cache')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('flow-export')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('vrf')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('multicast-routing')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('accounting-threshold')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('host')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('ftp')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('default-gateway')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('sla')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('slb')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('flow-aggregation')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('flow-top-talkers')
                self._TOEOL_()
                self._NL_()
                self._ignored_indent_()
            with self._option():
                self._token('prefix-list')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('pim')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('routing')
                self._TOEOL_()
                self._NL_()
            with self._option():
                self._token('tftp')
                self._TOEOL_()
                self._NL_()
            self._error(
                'expecting one of: '
                "'accounting-threshold' 'as-path' 'cef'"
                "'classless' 'default-gateway' 'dhcp"
                "excluded-address' 'dhcp pool' 'domain'"
                "'flow-aggregation' 'flow-cache' 'flow-"
                "export' 'flow-top-talkers' 'forward-"
                "protocol' 'ftp' 'host' 'http' 'inspect'"
                "'ips' 'multicast-routing' 'name-server'"
                "'nat' 'pim' 'prefix-list' 'route'"
                "'routing' 'scp' 'sla' 'slb' 'ssh'"
                "'subnet-zero' 'tcp' 'tftp' 'vrf'"
            )


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        text = Path(filename).read_text()
    parser = iosParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs,
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, iosParser, name='ios')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
