#include :: "ip.bnf"
#include :: "acl.bnf"

grammar
	=
	@:{command ~}+ $
	;

version
	= version:?/ASA Version [^\n]*/? NL
	| version:?/FWSM Version [^\n]*/? NL
	;

command
	= version
	| hostname
	| domain_name
	| interface
	| name
	| time_range
	| object
	| object_group
	| access_list
	| {access_list_remark}+
	| access_group
	| nat
	| ignored
	| unmatched NL
	;

interface_detail
	= type:"description" WS value:TOEOL NL
	| type:"nameif" WS value:identifier [WS] NL
	| type:("ip" WS "address") WS value:(ip4 WS ip4) WS "standby" WS standby:ip4 [WS] NL
	| type:("ipv6" WS "address") WS value:(ip6 "/" int) WS "standby" WS standby:ip6 [WS] NL
	| ["no" WS] TOEOL NL
	| ()
	;


name
	= "name" WS address:(ip4|ip6) WS hostname:identifier [WS "description" description:?/[^\n]+/?] NL
	;

access_list_rule_extended
	= "access-list" WS id:acl_id WS extended:acl_extended WS mode:acl_mode WS protocol:protocol_icmp WS src:acl_icmp_node WS dst:acl_icmp_node icmp:acl_icmp_options [WS options:acl_options] [WS] NL
	| "access-list" WS id:acl_id WS extended:acl_extended WS mode:acl_mode WS protocol:acl_protocol WS src:node WS dst:node [WS options:acl_options] [WS] NL
	;

(* access-list access_list_name standard {deny | permit} {any | ip_address mask} *)
access_list_rule_standard
	= "access-list" WS id:acl_id WS extended:"standard" WS mode:acl_mode WS src:acl_host [WS] NL
	;

(* access-list access_list_name webtype {deny|permit} url [url_string|any] [log [[disable| default]|level] interval secs] [time_range name]] *)
(* access-list access_list_name webtype {deny|permit} tcp [host ip_address|ip_address subnet_mask|any] [oper port [port]] [log [[disable|default]|level] interval secs] [time_range name]] *)

access_list_rule_webtype
	= "access-list" WS id:acl_id WS extended:"webtype" WS mode:acl_mode WS protocol:"url" WS url:(string|"any") [WS options:acl_options] [WS] NL
	| "access-list" WS id:acl_id WS extended:"webtype" WS mode:acl_mode WS protocol:"tcp" WS dst:node [WS options:acl_options] [WS] NL
	;

(* access-list access_list_name ethertype {deny|permit} {ipx|bpdu|mpls-unicast|mpls-multicast|is-is|any|hex_number} *)

access_list_rule_ethertype
	= "access-list" WS id:acl_id WS extended:"ethertype" TOEOL NL
	;


access_list
	= remark:{access_list_remark}+ >access_list_rule_extended
	| >access_list_rule_extended
	| remark:{access_list_remark}+ >access_list_rule_standard
	| >access_list_rule_standard
	| remark:{access_list_remark}+ >access_list_rule_webtype
	| >access_list_rule_webtype
	| remark:{access_list_remark}+ >access_list_rule_ethertype
	| >access_list_rule_ethertype
	;


access_list_remark
	= 'access-list' WS acl_id WS 'remark' SP remark:remark NL
	;

access_group
	= "access-group" WS name:obj_name WS direction:obj_name WS type:"interface" WS iface:obj_name [WS] NL
	| "access-group" WS name:obj_name WS type:"global" [WS] NL
	;


(* Twice NAT

    https://www.cisco.com/c/en/us/td/docs/security/asa/asa91/configuration/firewall/asa_91_firewall_config/nat_rules.html

    Configuring Dynamic NAT
 nat
    [ ( real_ifc , mapped_ifc ) ]
    [ line | { after-auto [ line ]}]
    source dynamic
    { real_obj | any }
    { mapped_obj [ interface [ ipv6 ]]}
    [ destination static { mapped_obj | interface [ ipv6 ]} real_obj ]
    [ service mapped_dest_svc_obj real_dest_svc_obj ]
    [ dns ]
    [ unidirectional ]
    [ inactive ]
    [ description desc ]


    Configuring Dynamic PAT (Hide)
 nat
    [ ( real_ifc , mapped_ifc ) ]
    [ line | { after-auto [ line ]}]
    source dynamic
    { real-obj | any }
    { mapped_obj [ interface [ ipv6 ]] | [ pat-pool mapped_obj [ round-robin ] [ extended ] [ flat [ include-reserve ]] [ interface [ ipv6 ]] | interface [ ipv6 ]}
    [ destination static { mapped_obj | interface [ ipv6 ]} real_obj ]
    [ service mapped_dest_svc_obj real_dest_svc_obj ]
    [ dns ]
    [ unidirectional ]
    [ inactive ]
    [ description desc ]


    Configuring Static NAT or Static NAT-with-Port-Translation
 nat
    [ ( real_ifc , mapped_ifc ) ]
    [ line | { after-object [ line ]}]
    source static
    real_ob
    [ mapped_obj | interface [ ipv6 ]]
    [ destination static { mapped_obj | interface [ ipv6 ]} real_obj ]
    [ service real_src_mapped_dest_svc_obj mapped_src_real_dest_svc_obj ]
    [ net-to-net ]
    [ dns ]
    [ unidirectional | no-proxy-arp ]
    [ inactive ]
    [ description desc ]


    Configuring Identity NAT
 nat
    [ ( real_ifc , mapped_ifc ) ]
    [ line | { after-object [ line ]}]
    source static
    { nw_obj nw_obj | any any }
    [ destination static { mapped_obj | interface [ ipv6 ]} real_obj ]
    [ service real_src_mapped_dest_svc_obj mapped_src_real_dest_svc_obj ]
    [ no-proxy-arp ]
    [ route-lookup ]
    [ inactive ]
    [ description desc ]

*)


(* FWSM / PIX nat

nat
    ( ifc )
    line
    address netmask


*)
nat
	= "nat" WS iface:nat_interfaces [WS pos:nat_pos] WS src:nat_src [WS dst:nat_dst] [WS service:nat_srv] options:{WS nat_options}* [WS] NL
	| "nat" WS "(" acl_interface_id ")" TOEOL
	;

nat_mapped_node
	= type:`object` name:acl_object_network
	| type:`group` name:acl_object_group_network
	| type:`interface` nat_mapped_fallback
	| type:"any"
	;

nat_mapped_src_dynamic_node
    = type:`object` name:acl_object_network fallback:[WS nat_mapped_fallback]
    | type:`group` name:acl_object_group_network fallback:[WS nat_mapped_fallback]
    | type:"interface" option+:[WS "ipv6"]
    | type:`pool` pool:pat_pool fallback:[WS nat_mapped_fallback]
    ;

nat_real_node
    = &(acl_object_network WS) type:`object` node:acl_object_network
    | &(acl_object_group_network WS) type:`group` node:acl_object_group_network
    | type:"any"
    ;

nat_src
	= "source" WS type:"dynamic" WS ~ real:nat_real_node WS mapped:nat_mapped_src_dynamic_node
	| "source" WS type:"static" WS ~ real:nat_real_node WS mapped:nat_mapped_node
	;

nat_dst
	= "destination" WS type:"static" WS mapped:nat_mapped_node WS real:(acl_object_network|acl_object_group_network)
	;

nat_pos
	= "after-" ("object"|"auto") [WS int]
	;

nat_srv
	= "service" WS acl_object_service WS acl_object_service
	;

nat_options
	= type:"net-to-net"
	| type:"dns"
	| type:"unidirectional"
	| type:"no-proxy-arp"
	| type:"inactive"
	| type:"description" WS value:TOEOL
	| type:"route-lookup"
	;

ignored_indent
	= {[NL] /^ [^\n]*/ NL}*
	;

ignored
	=  ":" TOEOL NL
	| "!" TOEOL NL
	| "aaa-server" WS TOEOL NL ignored_indent
	| "aaa" WS TOEOL NL
	| "app-agent" TOEOL NL
	| "arp-inspection" WS TOEOL NL
	| "arp" WS TOEOL NL
	| "asdm" WS TOEOL NL
	| "auth-prompt" WS TOEOL NL
	| "boot" TOEOL NL
	| "call-home" TOEOL NL ignored_indent
	| "class-map" WS TOEOL NL ignored_indent
	| "clock" TOEOL NL
	| "console" WS TOEOL NL
	| "command-alias" TOEOL NL
	| "Cryptochecksum:" TOEOL NL
	| "crypto" WS TOEOL NL ignored_indent
	| "dhcpd" WS TOEOL NL
	| "dhcprelay" WS TOEOL NL
	| "dns-guard" TOEOL NL
	| "dns" TOEOL NL ignored_indent
	| "dynamic-access-policy-record" WS TOEOL NL ignored_indent
	| "enable"  TOEOL NL
	| "eou" WS TOEOL NL
	| "established" WS TOEOL NL
	| "failover" [WS TOEOL] NL
	| "firewall" TOEOL NL
	| "flow-export" TOEOL NL
	| "fragment" TOEOL NL
	| "ftp" TOEOL NL
	| "global" WS TOEOL NL
	| "group-policy" WS TOEOL NL ignored_indent
	| "hpm" TOEOL NL
	| "http" WS TOEOL NL
	| "icmp" WS TOEOL NL
	| "ipv6" WS TOEOL NL
	| "ip" WS TOEOL NL
	| "license" WS TOEOL NL ignored_indent
	| "ldap" WS TOEOL NL ignored_indent
	| "logging" WS TOEOL NL
	| "mac-address-table" TOEOL NL
	| "mac-address" TOEOL NL
	| "management-access" TOEOL NL
	| "monitor-interface" WS TOEOL NL
	| "mtu" WS TOEOL NL
	| "multicast-routing" TOEOL NL
	| "nac-policy" TOEOL NL ignored_indent
	| "names" NL
	| "nat-control" [WS] TOEOL NL
	| "no" TOEOL NL
	| "ntp" WS TOEOL NL
	| "pager" WS TOEOL NL
	| "passwd" TOEOL NL
	| "password-policy" WS TOEOL NL
	| "policy-map" WS TOEOL NL ignored_indent
	| "privilege" WS TOEOL NL
	| "prompt" WS TOEOL NL
	| "resource" TOEOL NL
	| "router" WS TOEOL NL ignored_indent
	| "route" WS TOEOL NL
	| "same-security-traffic"  TOEOL NL
	| "service-module" WS TOEOL NL
	| "service-policy" WS TOEOL NL
	| "service" WS TOEOL NL
	| "sla" WS TOEOL NL ignored_indent
	| "snmp-map" WS TOEOL NL ignored_indent
	| "snmp-server" WS TOEOL NL
	| "smtp-server" WS TOEOL NL
	| "ssh" WS TOEOL NL ignored_indent
	| "ssl" WS TOEOL NL
	| "static" WS TOEOL NL
	| "sysopt" WS TOEOL NL
	| "tcp-map" WS TOEOL NL ignored_indent
	| "telnet" WS TOEOL NL
	| "terminal" WS TOEOL NL
	| "tftp-server" WS TOEOL NL
	| "threat-detection" WS TOEOL NL
	| "timeout" WS TOEOL NL
	| "tls-proxy" WS TOEOL NL
	| "tunnel-group-map" WS TOEOL NL
	| "tunnel-group" WS TOEOL NL ignored_indent
	| "user-identity" WS TOEOL NL
	| "username" WS TOEOL NL ignored_indent
	| "url-cache" WS TOEOL NL
	| "virtual" TOEOL NL
	| "vpdn" TOEOL NL
	| "vpn-group-policy" TOEOL NL
	| "vpn" TOEOL NL ignored_indent
	| "webvpn" TOEOL NL ignored_indent
	| "xlate-bypass" [WS] TOEOL NL
	| "xlate" WS TOEOL NL
	;

unmatched
	= ()
	;
