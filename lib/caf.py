#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class cafBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(cafBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class cafParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=cafBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(cafParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _ip4_(self):  # noqa
        self._pattern('((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])')

    @tatsumasu()
    def _ipX_(self):  # noqa
        self._pattern('\\w+\\.\\w+\\.\\w+\\.\\w+')

    @tatsumasu()
    def _ip6_(self):  # noqa
        self._pattern('[a-fA-F0-9]*:[a-fA-F0-9\\.\\:]+')

    @tatsumasu()
    def _grammar_(self):  # noqa
        self._expr_()
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _string_(self):  # noqa
        self._pattern('[A-Za-z0-9_\\-\\.]+')

    @tatsumasu()
    def _pattern_(self):  # noqa
        self._pattern('[A-Za-z0-9_\\-\\.\\?\\*\\[\\]\\!\\/]+')

    @tatsumasu()
    def _int_(self):  # noqa
        self._pattern('[0-9]+')

    @tatsumasu()
    def _comments_(self):  # noqa

        def block0():
            self._comment_()
        self._positive_closure(block0)

    @tatsumasu()
    def _comment_(self):  # noqa
        self._token('/*')
        self._pattern('([^*]|(\\*[^/]))*')
        self._token('*/')

    @tatsumasu()
    def _op_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('union')
            with self._option():
                self._token('intersect')
            with self._option():
                self._token('except')
            self._error('no available options')

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._expr_r_()
            with self._option():
                self._set_()
            self._error('no available options')

    @tatsumasu()
    def _expr_r_(self):  # noqa
        self._set_()

        def block0():
            self._op_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._expr_r_()
                    with self._option():
                        self._set_()
                    self._error('no available options')
        self._positive_closure(block0)

    @tatsumasu()
    def _direction_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('src')
            with self._option():
                self._token('dst')
            self._error('no available options')

    @tatsumasu()
    def _network_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('ANY4')
                        with self._option():
                            self._token('ANY6')
                        with self._option():
                            self._token('ANY')
                        with self._option():
                            self._token('any4')
                        with self._option():
                            self._token('any6')
                        with self._option():
                            self._token('any')
                        self._error('no available options')
                self.name_last_node('address')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.name_last_node('address')
                with self._optional():
                    self._token('/')
                    self._int_()
                    self.name_last_node('netmask')
            self._error('no available options')
        self.ast._define(
            ['address', 'netmask'],
            []
        )

    @tatsumasu()
    def _net_(self):  # noqa

        def block1():
            self._network_()
        self._positive_closure(block1)
        self.name_last_node('object')
        self.ast._define(
            ['object'],
            []
        )

    @tatsumasu()
    def _set_ip_(self):  # noqa
        self._token('ip')
        with self._group():
            self._direction_()
            self._net_()
        self.add_last_node_to_name('ip')
        self.ast._define(
            [],
            ['ip']
        )

    @tatsumasu()
    def _set_id_(self):  # noqa
        self._token('id')
        with self._group():
            self._pattern_()

    @tatsumasu()
    def _set_expr_(self):  # noqa
        self._token('(')
        self._expr_()
        self._token(')')

    @tatsumasu()
    def _set_r_(self):  # noqa
        with self._choice():
            with self._option():
                self._set_ip_()
            with self._option():
                self._set_expr_()
            with self._option():
                self._comments_()
            self._error('no available options')

    @tatsumasu()
    def _set_(self):  # noqa
        with self._optional():
            self._comments_()
        with self._optional():
            self._set_id_()
        self.name_last_node('id')

        def block2():
            self._set_r_()
        self._closure(block2)
        self.name_last_node('objects')
        self.ast._define(
            ['id', 'objects'],
            []
        )


class cafSemantics(object):
    def ip4(self, ast):  # noqa
        return ast

    def ipX(self, ast):  # noqa
        return ast

    def ip6(self, ast):  # noqa
        return ast

    def grammar(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def pattern(self, ast):  # noqa
        return ast

    def int(self, ast):  # noqa
        return ast

    def comments(self, ast):  # noqa
        return ast

    def comment(self, ast):  # noqa
        return ast

    def op(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def expr_r(self, ast):  # noqa
        return ast

    def direction(self, ast):  # noqa
        return ast

    def network(self, ast):  # noqa
        return ast

    def net(self, ast):  # noqa
        return ast

    def set_ip(self, ast):  # noqa
        return ast

    def set_id(self, ast):  # noqa
        return ast

    def set_expr(self, ast):  # noqa
        return ast

    def set_r(self, ast):  # noqa
        return ast

    def set(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'ip4'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = cafParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, cafParser, name='caf')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
