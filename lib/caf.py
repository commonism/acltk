#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 12, 29, 23, 59, 42, 0)

__all__ = [
    'cafParser',
    'cafSemantics',
    'main'
]


class cafParser(Parser):
    def __init__(self, whitespace=None, nameguard=True, **kwargs):
        super(cafParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _ip4_(self):
        self._pattern(r'((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])')

    @graken()
    def _ip6_(self):
        self._pattern(r'[a-fA-F0-9]*:[a-fA-F0-9\.\:]+')

    @graken()
    def _grammar_(self):
        self._expr_()
        self.ast['@'] = self.last_node
        self._check_eof()

    @graken()
    def _string_(self):
        self._pattern(r'[A-Za-z_\-]+')

    @graken()
    def _int_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _comment_(self):
        self._token('/*')
        self._pattern(r'[^\*\/]*')
        self._token('*/')

    @graken()
    def _op_(self):
        with self._choice():
            with self._option():
                self._token('union')
            with self._option():
                self._token('intersect')
            with self._option():
                self._token('except')
            self._error('expecting one of: except intersect union')

    @graken()
    def _expr_(self):
        with self._choice():
            with self._option():
                self._expr_r_()
            with self._option():
                self._set_()
            self._error('no available options')

    @graken()
    def _expr_r_(self):
        self._set_()

        def block0():
            self._op_()
            with self._group():
                with self._choice():
                    with self._option():
                        self._expr_r_()
                    with self._option():
                        self._set_()
                    self._error('no available options')
        self._positive_closure(block0)

    @graken()
    def _direction_(self):
        with self._choice():
            with self._option():
                self._token('src')
            with self._option():
                self._token('dst')
            self._error('expecting one of: dst src')

    @graken()
    def _network_(self):
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('ANY4')
                        with self._option():
                            self._token('ANY6')
                        with self._option():
                            self._token('ANY')
                        with self._option():
                            self._token('any4')
                        with self._option():
                            self._token('any6')
                        with self._option():
                            self._token('any')
                        self._error('expecting one of: ANY ANY4 ANY6 any any4 any6')
                self.ast['address'] = self.last_node
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._ip4_()
                        with self._option():
                            self._ip6_()
                        self._error('no available options')
                self.ast['address'] = self.last_node
                with self._optional():
                    self._token('/')
                    self._int_()
                    self.ast['netmask'] = self.last_node
            self._error('expecting one of: ANY ANY4 ANY6 any any4 any6')

        self.ast._define(
            ['address', 'netmask'],
            []
        )

    @graken()
    def _net_(self):

        def block1():
            self._network_()
        self._positive_closure(block1)

        self.ast['object'] = self.last_node

        self.ast._define(
            ['object'],
            []
        )

    @graken()
    def _set_ip_(self):
        self._token('ip')
        with self._group():
            self._direction_()
            self._net_()
        self.ast.setlist('ip', self.last_node)

        self.ast._define(
            [],
            ['ip']
        )

    @graken()
    def _set_id_(self):
        self._token('id')
        with self._group():
            self._string_()

    @graken()
    def _set_expr_(self):
        self._token('(')
        self._expr_()
        self._token(')')

    @graken()
    def _set_r_(self):
        with self._choice():
            with self._option():
                self._set_ip_()
            with self._option():
                self._set_expr_()
            with self._option():
                self._comment_()
            self._error('no available options')

    @graken()
    def _set_(self):
        with self._optional():
            self._comment_()
        with self._optional():
            self._set_id_()
        self.ast['id'] = self.last_node

        def block2():
            self._set_r_()
        self._closure(block2)
        self.ast['objects'] = self.last_node

        self.ast._define(
            ['id', 'objects'],
            []
        )


class cafSemantics(object):
    def ip4(self, ast):
        return ast

    def ip6(self, ast):
        return ast

    def grammar(self, ast):
        return ast

    def string(self, ast):
        return ast

    def int(self, ast):
        return ast

    def comment(self, ast):
        return ast

    def op(self, ast):
        return ast

    def expr(self, ast):
        return ast

    def expr_r(self, ast):
        return ast

    def direction(self, ast):
        return ast

    def network(self, ast):
        return ast

    def net(self, ast):
        return ast

    def set_ip(self, ast):
        return ast

    def set_id(self, ast):
        return ast

    def set_expr(self, ast):
        return ast

    def set_r(self, ast):
        return ast

    def set(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = cafParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in cafParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for caf.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
